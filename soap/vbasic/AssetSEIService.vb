'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18063
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by wsdl, Version=4.0.30319.17929.
'

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Web.Services.WebServiceBindingAttribute(Name:="AssetSEIPortBinding", [Namespace]:="http://portfolio.extensis/service/asset")>  _
Partial Public Class AssetSEIService
    Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
    
    Private addAssetsByPathOperationCompleted As System.Threading.SendOrPostCallback
    
    Private addItemsToGalleryOperationCompleted As System.Threading.SendOrPostCallback
    
    Private cancelJobOperationCompleted As System.Threading.SendOrPostCallback
    
    Private createGalleryOperationCompleted As System.Threading.SendOrPostCallback
    
    Private getWatchFolderOperationCompleted As System.Threading.SendOrPostCallback
    
    Private addWatchFolderOperationCompleted As System.Threading.SendOrPostCallback
    
    Private updateWatchFolderOperationCompleted As System.Threading.SendOrPostCallback
    
    Private removeWatchFolderOperationCompleted As System.Threading.SendOrPostCallback
    
    Private createSubfolderOperationCompleted As System.Threading.SendOrPostCallback
    
    Private deleteGalleryOperationCompleted As System.Threading.SendOrPostCallback
    
    Private deleteSubfolderOperationCompleted As System.Threading.SendOrPostCallback
    
    Private getAssetPreviewOperationCompleted As System.Threading.SendOrPostCallback
    
    Private getAssetsOperationCompleted As System.Threading.SendOrPostCallback
    
    Private getAutomationScriptsOperationCompleted As System.Threading.SendOrPostCallback
    
    Private getCatalogPermissionsOperationCompleted As System.Threading.SendOrPostCallback
    
    Private getCatalogsOperationCompleted As System.Threading.SendOrPostCallback
    
    Private getDetailsForWatchFolderOperationCompleted As System.Threading.SendOrPostCallback
    
    Private getErrorDetailsForJobOperationCompleted As System.Threading.SendOrPostCallback
    
    Private getFieldDefinitionsOperationCompleted As System.Threading.SendOrPostCallback
    
    Private addOrRemovePredefinedValuesOperationCompleted As System.Threading.SendOrPostCallback
    
    Private setPredefinedValuesOperationCompleted As System.Threading.SendOrPostCallback
    
    Private addNestedPredefinedValuesOperationCompleted As System.Threading.SendOrPostCallback
    
    Private changeNestedPredefinedValueOperationCompleted As System.Threading.SendOrPostCallback
    
    Private moveNestedPredefinedValueOperationCompleted As System.Threading.SendOrPostCallback
    
    Private deleteNestedPredefinedValuesOperationCompleted As System.Threading.SendOrPostCallback
    
    Private getFolderTreeForWatchFolderOperationCompleted As System.Threading.SendOrPostCallback
    
    Private getGalleriesOperationCompleted As System.Threading.SendOrPostCallback
    
    Private getJobIDsOperationCompleted As System.Threading.SendOrPostCallback
    
    Private getRSAPublicEncryptionKeyOperationCompleted As System.Threading.SendOrPostCallback
    
    Private getServerFeaturesOperationCompleted As System.Threading.SendOrPostCallback
    
    Private getServerSystemInformationOperationCompleted As System.Threading.SendOrPostCallback
    
    Private getStatusForJobsOperationCompleted As System.Threading.SendOrPostCallback
    
    Private getWatchFoldersOperationCompleted As System.Threading.SendOrPostCallback
    
    Private loginOperationCompleted As System.Threading.SendOrPostCallback
    
    Private logoutOperationCompleted As System.Threading.SendOrPostCallback
    
    Private moveSubfolderOperationCompleted As System.Threading.SendOrPostCallback
    
    Private removeAssetsFromCatalogOperationCompleted As System.Threading.SendOrPostCallback
    
    Private removeItemsFromGalleryOperationCompleted As System.Threading.SendOrPostCallback
    
    Private runJobOperationCompleted As System.Threading.SendOrPostCallback
    
    Private getCatalogingOptionsOperationCompleted As System.Threading.SendOrPostCallback
    
    Private getIngestConfigOperationCompleted As System.Threading.SendOrPostCallback
    
    Private synchronizeFolderOperationCompleted As System.Threading.SendOrPostCallback
    
    Private getServerFolderNamesOperationCompleted As System.Threading.SendOrPostCallback
    
    Private updateAssetFieldValuesOperationCompleted As System.Threading.SendOrPostCallback
    
    Private updateGalleryOperationCompleted As System.Threading.SendOrPostCallback
    
    Private createTaskPresetOperationCompleted As System.Threading.SendOrPostCallback
    
    Private listTaskSettingsOperationCompleted As System.Threading.SendOrPostCallback
    
    Private listColorModeOperationCompleted As System.Threading.SendOrPostCallback
    
    Private listOutputFileFormatOperationCompleted As System.Threading.SendOrPostCallback
    
    Private listOutputDestinationOperationCompleted As System.Threading.SendOrPostCallback
    
    Private listRenameTypeOperationCompleted As System.Threading.SendOrPostCallback
    
    Private listDNGEmbedRawFileOperationCompleted As System.Threading.SendOrPostCallback
    
    Private listWatermarkTypeOperationCompleted As System.Threading.SendOrPostCallback
    
    Private listWatermarkPositionOperationCompleted As System.Threading.SendOrPostCallback
    
    Private listAddToCatalogOperationCompleted As System.Threading.SendOrPostCallback
    
    Private listCompressionTypeOperationCompleted As System.Threading.SendOrPostCallback
    
    Private listDngCameraRawVersionOperationCompleted As System.Threading.SendOrPostCallback
    
    Private listDngJpegPreviewTypeOperationCompleted As System.Threading.SendOrPostCallback
    
    Private listResizeTypeOperationCompleted As System.Threading.SendOrPostCallback
    
    Private listUnitOperationCompleted As System.Threading.SendOrPostCallback
    
    Private deleteTaskOperationCompleted As System.Threading.SendOrPostCallback
    
    Private getAssetsWithBatchOfValuesOperationCompleted As System.Threading.SendOrPostCallback
    
    Private getCatalogChangeStatusOperationCompleted As System.Threading.SendOrPostCallback
    
    Private getDefaultViewSettingsOperationCompleted As System.Threading.SendOrPostCallback
    
    Private getExclusionInfoForCatalogOperationCompleted As System.Threading.SendOrPostCallback
    
    Private getTaskPresetsOperationCompleted As System.Threading.SendOrPostCallback
    
    Private getUnmatchedFieldValuesFromBatchFindOperationCompleted As System.Threading.SendOrPostCallback
    
    Private getUserPreferencesOperationCompleted As System.Threading.SendOrPostCallback
    
    Private getUserViewSettingsOperationCompleted As System.Threading.SendOrPostCallback
    
    Private primeAssetPreviewsOperationCompleted As System.Threading.SendOrPostCallback
    
    Private setDefaultViewSettingsOperationCompleted As System.Threading.SendOrPostCallback
    
    Private setSessionInactivityTimeoutOperationCompleted As System.Threading.SendOrPostCallback
    
    Private setUserPreferencesOperationCompleted As System.Threading.SendOrPostCallback
    
    Private setUserViewSettingsOperationCompleted As System.Threading.SendOrPostCallback
    
    Private updateTaskPresetOperationCompleted As System.Threading.SendOrPostCallback
    
    Private uploadFileOperationCompleted As System.Threading.SendOrPostCallback
    
    Private getVideoExtensionsOperationCompleted As System.Threading.SendOrPostCallback
    
    Private getAudioExtensionsOperationCompleted As System.Threading.SendOrPostCallback
    
    Private completionOperationCompleted As System.Threading.SendOrPostCallback
    
    '''<remarks/>
    Public Sub New()
        MyBase.New
        Me.Url = "http://127.0.0.1:8090/ws/1.0/AssetService"
    End Sub
    
    '''<remarks/>
    Public Event addAssetsByPathCompleted As addAssetsByPathCompletedEventHandler
    
    '''<remarks/>
    Public Event addItemsToGalleryCompleted As addItemsToGalleryCompletedEventHandler
    
    '''<remarks/>
    Public Event cancelJobCompleted As cancelJobCompletedEventHandler
    
    '''<remarks/>
    Public Event createGalleryCompleted As createGalleryCompletedEventHandler
    
    '''<remarks/>
    Public Event getWatchFolderCompleted As getWatchFolderCompletedEventHandler
    
    '''<remarks/>
    Public Event addWatchFolderCompleted As addWatchFolderCompletedEventHandler
    
    '''<remarks/>
    Public Event updateWatchFolderCompleted As updateWatchFolderCompletedEventHandler
    
    '''<remarks/>
    Public Event removeWatchFolderCompleted As removeWatchFolderCompletedEventHandler
    
    '''<remarks/>
    Public Event createSubfolderCompleted As createSubfolderCompletedEventHandler
    
    '''<remarks/>
    Public Event deleteGalleryCompleted As deleteGalleryCompletedEventHandler
    
    '''<remarks/>
    Public Event deleteSubfolderCompleted As deleteSubfolderCompletedEventHandler
    
    '''<remarks/>
    Public Event getAssetPreviewCompleted As getAssetPreviewCompletedEventHandler
    
    '''<remarks/>
    Public Event getAssetsCompleted As getAssetsCompletedEventHandler
    
    '''<remarks/>
    Public Event getAutomationScriptsCompleted As getAutomationScriptsCompletedEventHandler
    
    '''<remarks/>
    Public Event getCatalogPermissionsCompleted As getCatalogPermissionsCompletedEventHandler
    
    '''<remarks/>
    Public Event getCatalogsCompleted As getCatalogsCompletedEventHandler
    
    '''<remarks/>
    Public Event getDetailsForWatchFolderCompleted As getDetailsForWatchFolderCompletedEventHandler
    
    '''<remarks/>
    Public Event getErrorDetailsForJobCompleted As getErrorDetailsForJobCompletedEventHandler
    
    '''<remarks/>
    Public Event getFieldDefinitionsCompleted As getFieldDefinitionsCompletedEventHandler
    
    '''<remarks/>
    Public Event addOrRemovePredefinedValuesCompleted As addOrRemovePredefinedValuesCompletedEventHandler
    
    '''<remarks/>
    Public Event setPredefinedValuesCompleted As setPredefinedValuesCompletedEventHandler
    
    '''<remarks/>
    Public Event addNestedPredefinedValuesCompleted As addNestedPredefinedValuesCompletedEventHandler
    
    '''<remarks/>
    Public Event changeNestedPredefinedValueCompleted As changeNestedPredefinedValueCompletedEventHandler
    
    '''<remarks/>
    Public Event moveNestedPredefinedValueCompleted As moveNestedPredefinedValueCompletedEventHandler
    
    '''<remarks/>
    Public Event deleteNestedPredefinedValuesCompleted As deleteNestedPredefinedValuesCompletedEventHandler
    
    '''<remarks/>
    Public Event getFolderTreeForWatchFolderCompleted As getFolderTreeForWatchFolderCompletedEventHandler
    
    '''<remarks/>
    Public Event getGalleriesCompleted As getGalleriesCompletedEventHandler
    
    '''<remarks/>
    Public Event getJobIDsCompleted As getJobIDsCompletedEventHandler
    
    '''<remarks/>
    Public Event getRSAPublicEncryptionKeyCompleted As getRSAPublicEncryptionKeyCompletedEventHandler
    
    '''<remarks/>
    Public Event getServerFeaturesCompleted As getServerFeaturesCompletedEventHandler
    
    '''<remarks/>
    Public Event getServerSystemInformationCompleted As getServerSystemInformationCompletedEventHandler
    
    '''<remarks/>
    Public Event getStatusForJobsCompleted As getStatusForJobsCompletedEventHandler
    
    '''<remarks/>
    Public Event getWatchFoldersCompleted As getWatchFoldersCompletedEventHandler
    
    '''<remarks/>
    Public Event loginCompleted As loginCompletedEventHandler
    
    '''<remarks/>
    Public Event logoutCompleted As logoutCompletedEventHandler
    
    '''<remarks/>
    Public Event moveSubfolderCompleted As moveSubfolderCompletedEventHandler
    
    '''<remarks/>
    Public Event removeAssetsFromCatalogCompleted As removeAssetsFromCatalogCompletedEventHandler
    
    '''<remarks/>
    Public Event removeItemsFromGalleryCompleted As removeItemsFromGalleryCompletedEventHandler
    
    '''<remarks/>
    Public Event runJobCompleted As runJobCompletedEventHandler
    
    '''<remarks/>
    Public Event getCatalogingOptionsCompleted As getCatalogingOptionsCompletedEventHandler
    
    '''<remarks/>
    Public Event getIngestConfigCompleted As getIngestConfigCompletedEventHandler
    
    '''<remarks/>
    Public Event synchronizeFolderCompleted As synchronizeFolderCompletedEventHandler
    
    '''<remarks/>
    Public Event getServerFolderNamesCompleted As getServerFolderNamesCompletedEventHandler
    
    '''<remarks/>
    Public Event updateAssetFieldValuesCompleted As updateAssetFieldValuesCompletedEventHandler
    
    '''<remarks/>
    Public Event updateGalleryCompleted As updateGalleryCompletedEventHandler
    
    '''<remarks/>
    Public Event createTaskPresetCompleted As createTaskPresetCompletedEventHandler
    
    '''<remarks/>
    Public Event listTaskSettingsCompleted As listTaskSettingsCompletedEventHandler
    
    '''<remarks/>
    Public Event listColorModeCompleted As listColorModeCompletedEventHandler
    
    '''<remarks/>
    Public Event listOutputFileFormatCompleted As listOutputFileFormatCompletedEventHandler
    
    '''<remarks/>
    Public Event listOutputDestinationCompleted As listOutputDestinationCompletedEventHandler
    
    '''<remarks/>
    Public Event listRenameTypeCompleted As listRenameTypeCompletedEventHandler
    
    '''<remarks/>
    Public Event listDNGEmbedRawFileCompleted As listDNGEmbedRawFileCompletedEventHandler
    
    '''<remarks/>
    Public Event listWatermarkTypeCompleted As listWatermarkTypeCompletedEventHandler
    
    '''<remarks/>
    Public Event listWatermarkPositionCompleted As listWatermarkPositionCompletedEventHandler
    
    '''<remarks/>
    Public Event listAddToCatalogCompleted As listAddToCatalogCompletedEventHandler
    
    '''<remarks/>
    Public Event listCompressionTypeCompleted As listCompressionTypeCompletedEventHandler
    
    '''<remarks/>
    Public Event listDngCameraRawVersionCompleted As listDngCameraRawVersionCompletedEventHandler
    
    '''<remarks/>
    Public Event listDngJpegPreviewTypeCompleted As listDngJpegPreviewTypeCompletedEventHandler
    
    '''<remarks/>
    Public Event listResizeTypeCompleted As listResizeTypeCompletedEventHandler
    
    '''<remarks/>
    Public Event listUnitCompleted As listUnitCompletedEventHandler
    
    '''<remarks/>
    Public Event deleteTaskCompleted As deleteTaskCompletedEventHandler
    
    '''<remarks/>
    Public Event getAssetsWithBatchOfValuesCompleted As getAssetsWithBatchOfValuesCompletedEventHandler
    
    '''<remarks/>
    Public Event getCatalogChangeStatusCompleted As getCatalogChangeStatusCompletedEventHandler
    
    '''<remarks/>
    Public Event getDefaultViewSettingsCompleted As getDefaultViewSettingsCompletedEventHandler
    
    '''<remarks/>
    Public Event getExclusionInfoForCatalogCompleted As getExclusionInfoForCatalogCompletedEventHandler
    
    '''<remarks/>
    Public Event getTaskPresetsCompleted As getTaskPresetsCompletedEventHandler
    
    '''<remarks/>
    Public Event getUnmatchedFieldValuesFromBatchFindCompleted As getUnmatchedFieldValuesFromBatchFindCompletedEventHandler
    
    '''<remarks/>
    Public Event getUserPreferencesCompleted As getUserPreferencesCompletedEventHandler
    
    '''<remarks/>
    Public Event getUserViewSettingsCompleted As getUserViewSettingsCompletedEventHandler
    
    '''<remarks/>
    Public Event primeAssetPreviewsCompleted As primeAssetPreviewsCompletedEventHandler
    
    '''<remarks/>
    Public Event setDefaultViewSettingsCompleted As setDefaultViewSettingsCompletedEventHandler
    
    '''<remarks/>
    Public Event setSessionInactivityTimeoutCompleted As setSessionInactivityTimeoutCompletedEventHandler
    
    '''<remarks/>
    Public Event setUserPreferencesCompleted As setUserPreferencesCompletedEventHandler
    
    '''<remarks/>
    Public Event setUserViewSettingsCompleted As setUserViewSettingsCompletedEventHandler
    
    '''<remarks/>
    Public Event updateTaskPresetCompleted As updateTaskPresetCompletedEventHandler
    
    '''<remarks/>
    Public Event uploadFileCompleted As uploadFileCompletedEventHandler
    
    '''<remarks/>
    Public Event getVideoExtensionsCompleted As getVideoExtensionsCompletedEventHandler
    
    '''<remarks/>
    Public Event getAudioExtensionsCompleted As getAudioExtensionsCompletedEventHandler
    
    '''<remarks/>
    Public Event completionCompleted As completionCompletedEventHandler
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function addAssetsByPath(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute("assetPaths", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> ByVal assetPaths() As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> String()
        Dim results() As Object = Me.Invoke("addAssetsByPath", New Object() {sessionId, catalogId, assetPaths})
        Return CType(results(0),String())
    End Function
    
    '''<remarks/>
    Public Function BeginaddAssetsByPath(ByVal sessionId As String, ByVal catalogId As String, ByVal assetPaths() As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("addAssetsByPath", New Object() {sessionId, catalogId, assetPaths}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndaddAssetsByPath(ByVal asyncResult As System.IAsyncResult) As String()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),String())
    End Function
    
    '''<remarks/>
    Public Overloads Sub addAssetsByPathAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal assetPaths() As String)
        Me.addAssetsByPathAsync(sessionId, catalogId, assetPaths, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub addAssetsByPathAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal assetPaths() As String, ByVal userState As Object)
        If (Me.addAssetsByPathOperationCompleted Is Nothing) Then
            Me.addAssetsByPathOperationCompleted = AddressOf Me.OnaddAssetsByPathOperationCompleted
        End If
        Me.InvokeAsync("addAssetsByPath", New Object() {sessionId, catalogId, assetPaths}, Me.addAssetsByPathOperationCompleted, userState)
    End Sub
    
    Private Sub OnaddAssetsByPathOperationCompleted(ByVal arg As Object)
        If (Not (Me.addAssetsByPathCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent addAssetsByPathCompleted(Me, New addAssetsByPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Sub addItemsToGallery(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal galleryId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal assets As assetQuery)
        Me.Invoke("addItemsToGallery", New Object() {sessionId, catalogId, galleryId, assets})
    End Sub
    
    '''<remarks/>
    Public Function BeginaddItemsToGallery(ByVal sessionId As String, ByVal catalogId As String, ByVal galleryId As String, ByVal assets As assetQuery, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("addItemsToGallery", New Object() {sessionId, catalogId, galleryId, assets}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Sub EndaddItemsToGallery(ByVal asyncResult As System.IAsyncResult)
        Me.EndInvoke(asyncResult)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub addItemsToGalleryAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal galleryId As String, ByVal assets As assetQuery)
        Me.addItemsToGalleryAsync(sessionId, catalogId, galleryId, assets, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub addItemsToGalleryAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal galleryId As String, ByVal assets As assetQuery, ByVal userState As Object)
        If (Me.addItemsToGalleryOperationCompleted Is Nothing) Then
            Me.addItemsToGalleryOperationCompleted = AddressOf Me.OnaddItemsToGalleryOperationCompleted
        End If
        Me.InvokeAsync("addItemsToGallery", New Object() {sessionId, catalogId, galleryId, assets}, Me.addItemsToGalleryOperationCompleted, userState)
    End Sub
    
    Private Sub OnaddItemsToGalleryOperationCompleted(ByVal arg As Object)
        If (Not (Me.addItemsToGalleryCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent addItemsToGalleryCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Sub cancelJob(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal jobId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal deleteJob As Boolean)
        Me.Invoke("cancelJob", New Object() {sessionId, jobId, deleteJob})
    End Sub
    
    '''<remarks/>
    Public Function BegincancelJob(ByVal sessionId As String, ByVal jobId As String, ByVal deleteJob As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("cancelJob", New Object() {sessionId, jobId, deleteJob}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Sub EndcancelJob(ByVal asyncResult As System.IAsyncResult)
        Me.EndInvoke(asyncResult)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub cancelJobAsync(ByVal sessionId As String, ByVal jobId As String, ByVal deleteJob As Boolean)
        Me.cancelJobAsync(sessionId, jobId, deleteJob, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub cancelJobAsync(ByVal sessionId As String, ByVal jobId As String, ByVal deleteJob As Boolean, ByVal userState As Object)
        If (Me.cancelJobOperationCompleted Is Nothing) Then
            Me.cancelJobOperationCompleted = AddressOf Me.OncancelJobOperationCompleted
        End If
        Me.InvokeAsync("cancelJob", New Object() {sessionId, jobId, deleteJob}, Me.cancelJobOperationCompleted, userState)
    End Sub
    
    Private Sub OncancelJobOperationCompleted(ByVal arg As Object)
        If (Not (Me.cancelJobCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent cancelJobCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function createGallery(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal gallery As gallery) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> gallery
        Dim results() As Object = Me.Invoke("createGallery", New Object() {sessionId, catalogId, gallery})
        Return CType(results(0),gallery)
    End Function
    
    '''<remarks/>
    Public Function BegincreateGallery(ByVal sessionId As String, ByVal catalogId As String, ByVal gallery As gallery, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("createGallery", New Object() {sessionId, catalogId, gallery}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndcreateGallery(ByVal asyncResult As System.IAsyncResult) As gallery
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),gallery)
    End Function
    
    '''<remarks/>
    Public Overloads Sub createGalleryAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal gallery As gallery)
        Me.createGalleryAsync(sessionId, catalogId, gallery, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub createGalleryAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal gallery As gallery, ByVal userState As Object)
        If (Me.createGalleryOperationCompleted Is Nothing) Then
            Me.createGalleryOperationCompleted = AddressOf Me.OncreateGalleryOperationCompleted
        End If
        Me.InvokeAsync("createGallery", New Object() {sessionId, catalogId, gallery}, Me.createGalleryOperationCompleted, userState)
    End Sub
    
    Private Sub OncreateGalleryOperationCompleted(ByVal arg As Object)
        If (Not (Me.createGalleryCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent createGalleryCompleted(Me, New createGalleryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function getWatchFolder(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal folderId As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> watchFolder
        Dim results() As Object = Me.Invoke("getWatchFolder", New Object() {sessionId, catalogId, folderId})
        Return CType(results(0),watchFolder)
    End Function
    
    '''<remarks/>
    Public Function BegingetWatchFolder(ByVal sessionId As String, ByVal catalogId As String, ByVal folderId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("getWatchFolder", New Object() {sessionId, catalogId, folderId}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndgetWatchFolder(ByVal asyncResult As System.IAsyncResult) As watchFolder
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),watchFolder)
    End Function
    
    '''<remarks/>
    Public Overloads Sub getWatchFolderAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal folderId As String)
        Me.getWatchFolderAsync(sessionId, catalogId, folderId, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub getWatchFolderAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal folderId As String, ByVal userState As Object)
        If (Me.getWatchFolderOperationCompleted Is Nothing) Then
            Me.getWatchFolderOperationCompleted = AddressOf Me.OngetWatchFolderOperationCompleted
        End If
        Me.InvokeAsync("getWatchFolder", New Object() {sessionId, catalogId, folderId}, Me.getWatchFolderOperationCompleted, userState)
    End Sub
    
    Private Sub OngetWatchFolderOperationCompleted(ByVal arg As Object)
        If (Not (Me.getWatchFolderCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent getWatchFolderCompleted(Me, New getWatchFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function addWatchFolder(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal folder As watchFolder, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal createFolderOnDisk As Boolean, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal combineChildFolders As Boolean) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> watchFolder
        Dim results() As Object = Me.Invoke("addWatchFolder", New Object() {sessionId, catalogId, folder, createFolderOnDisk, combineChildFolders})
        Return CType(results(0),watchFolder)
    End Function
    
    '''<remarks/>
    Public Function BeginaddWatchFolder(ByVal sessionId As String, ByVal catalogId As String, ByVal folder As watchFolder, ByVal createFolderOnDisk As Boolean, ByVal combineChildFolders As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("addWatchFolder", New Object() {sessionId, catalogId, folder, createFolderOnDisk, combineChildFolders}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndaddWatchFolder(ByVal asyncResult As System.IAsyncResult) As watchFolder
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),watchFolder)
    End Function
    
    '''<remarks/>
    Public Overloads Sub addWatchFolderAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal folder As watchFolder, ByVal createFolderOnDisk As Boolean, ByVal combineChildFolders As Boolean)
        Me.addWatchFolderAsync(sessionId, catalogId, folder, createFolderOnDisk, combineChildFolders, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub addWatchFolderAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal folder As watchFolder, ByVal createFolderOnDisk As Boolean, ByVal combineChildFolders As Boolean, ByVal userState As Object)
        If (Me.addWatchFolderOperationCompleted Is Nothing) Then
            Me.addWatchFolderOperationCompleted = AddressOf Me.OnaddWatchFolderOperationCompleted
        End If
        Me.InvokeAsync("addWatchFolder", New Object() {sessionId, catalogId, folder, createFolderOnDisk, combineChildFolders}, Me.addWatchFolderOperationCompleted, userState)
    End Sub
    
    Private Sub OnaddWatchFolderOperationCompleted(ByVal arg As Object)
        If (Not (Me.addWatchFolderCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent addWatchFolderCompleted(Me, New addWatchFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Sub updateWatchFolder(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal folder As watchFolder)
        Me.Invoke("updateWatchFolder", New Object() {sessionId, catalogId, folder})
    End Sub
    
    '''<remarks/>
    Public Function BeginupdateWatchFolder(ByVal sessionId As String, ByVal catalogId As String, ByVal folder As watchFolder, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("updateWatchFolder", New Object() {sessionId, catalogId, folder}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Sub EndupdateWatchFolder(ByVal asyncResult As System.IAsyncResult)
        Me.EndInvoke(asyncResult)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub updateWatchFolderAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal folder As watchFolder)
        Me.updateWatchFolderAsync(sessionId, catalogId, folder, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub updateWatchFolderAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal folder As watchFolder, ByVal userState As Object)
        If (Me.updateWatchFolderOperationCompleted Is Nothing) Then
            Me.updateWatchFolderOperationCompleted = AddressOf Me.OnupdateWatchFolderOperationCompleted
        End If
        Me.InvokeAsync("updateWatchFolder", New Object() {sessionId, catalogId, folder}, Me.updateWatchFolderOperationCompleted, userState)
    End Sub
    
    Private Sub OnupdateWatchFolderOperationCompleted(ByVal arg As Object)
        If (Not (Me.updateWatchFolderCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent updateWatchFolderCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Sub removeWatchFolder(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal folderId As String)
        Me.Invoke("removeWatchFolder", New Object() {sessionId, catalogId, folderId})
    End Sub
    
    '''<remarks/>
    Public Function BeginremoveWatchFolder(ByVal sessionId As String, ByVal catalogId As String, ByVal folderId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("removeWatchFolder", New Object() {sessionId, catalogId, folderId}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Sub EndremoveWatchFolder(ByVal asyncResult As System.IAsyncResult)
        Me.EndInvoke(asyncResult)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub removeWatchFolderAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal folderId As String)
        Me.removeWatchFolderAsync(sessionId, catalogId, folderId, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub removeWatchFolderAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal folderId As String, ByVal userState As Object)
        If (Me.removeWatchFolderOperationCompleted Is Nothing) Then
            Me.removeWatchFolderOperationCompleted = AddressOf Me.OnremoveWatchFolderOperationCompleted
        End If
        Me.InvokeAsync("removeWatchFolder", New Object() {sessionId, catalogId, folderId}, Me.removeWatchFolderOperationCompleted, userState)
    End Sub
    
    Private Sub OnremoveWatchFolderOperationCompleted(ByVal arg As Object)
        If (Not (Me.removeWatchFolderCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent removeWatchFolderCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Sub createSubfolder(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal watchFolderId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal relativeSubfolderPath As String)
        Me.Invoke("createSubfolder", New Object() {sessionId, catalogId, watchFolderId, relativeSubfolderPath})
    End Sub
    
    '''<remarks/>
    Public Function BegincreateSubfolder(ByVal sessionId As String, ByVal catalogId As String, ByVal watchFolderId As String, ByVal relativeSubfolderPath As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("createSubfolder", New Object() {sessionId, catalogId, watchFolderId, relativeSubfolderPath}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Sub EndcreateSubfolder(ByVal asyncResult As System.IAsyncResult)
        Me.EndInvoke(asyncResult)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub createSubfolderAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal watchFolderId As String, ByVal relativeSubfolderPath As String)
        Me.createSubfolderAsync(sessionId, catalogId, watchFolderId, relativeSubfolderPath, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub createSubfolderAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal watchFolderId As String, ByVal relativeSubfolderPath As String, ByVal userState As Object)
        If (Me.createSubfolderOperationCompleted Is Nothing) Then
            Me.createSubfolderOperationCompleted = AddressOf Me.OncreateSubfolderOperationCompleted
        End If
        Me.InvokeAsync("createSubfolder", New Object() {sessionId, catalogId, watchFolderId, relativeSubfolderPath}, Me.createSubfolderOperationCompleted, userState)
    End Sub
    
    Private Sub OncreateSubfolderOperationCompleted(ByVal arg As Object)
        If (Not (Me.createSubfolderCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent createSubfolderCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Sub deleteGallery(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal galleryId As String)
        Me.Invoke("deleteGallery", New Object() {sessionId, catalogId, galleryId})
    End Sub
    
    '''<remarks/>
    Public Function BegindeleteGallery(ByVal sessionId As String, ByVal catalogId As String, ByVal galleryId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("deleteGallery", New Object() {sessionId, catalogId, galleryId}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Sub EnddeleteGallery(ByVal asyncResult As System.IAsyncResult)
        Me.EndInvoke(asyncResult)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub deleteGalleryAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal galleryId As String)
        Me.deleteGalleryAsync(sessionId, catalogId, galleryId, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub deleteGalleryAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal galleryId As String, ByVal userState As Object)
        If (Me.deleteGalleryOperationCompleted Is Nothing) Then
            Me.deleteGalleryOperationCompleted = AddressOf Me.OndeleteGalleryOperationCompleted
        End If
        Me.InvokeAsync("deleteGallery", New Object() {sessionId, catalogId, galleryId}, Me.deleteGalleryOperationCompleted, userState)
    End Sub
    
    Private Sub OndeleteGalleryOperationCompleted(ByVal arg As Object)
        If (Not (Me.deleteGalleryCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent deleteGalleryCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Sub deleteSubfolder(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal watchFolderId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal relativePath As String)
        Me.Invoke("deleteSubfolder", New Object() {sessionId, catalogId, watchFolderId, relativePath})
    End Sub
    
    '''<remarks/>
    Public Function BegindeleteSubfolder(ByVal sessionId As String, ByVal catalogId As String, ByVal watchFolderId As String, ByVal relativePath As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("deleteSubfolder", New Object() {sessionId, catalogId, watchFolderId, relativePath}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Sub EnddeleteSubfolder(ByVal asyncResult As System.IAsyncResult)
        Me.EndInvoke(asyncResult)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub deleteSubfolderAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal watchFolderId As String, ByVal relativePath As String)
        Me.deleteSubfolderAsync(sessionId, catalogId, watchFolderId, relativePath, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub deleteSubfolderAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal watchFolderId As String, ByVal relativePath As String, ByVal userState As Object)
        If (Me.deleteSubfolderOperationCompleted Is Nothing) Then
            Me.deleteSubfolderOperationCompleted = AddressOf Me.OndeleteSubfolderOperationCompleted
        End If
        Me.InvokeAsync("deleteSubfolder", New Object() {sessionId, catalogId, watchFolderId, relativePath}, Me.deleteSubfolderOperationCompleted, userState)
    End Sub
    
    Private Sub OndeleteSubfolderOperationCompleted(ByVal arg As Object)
        If (Not (Me.deleteSubfolderCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent deleteSubfolderCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function getAssetPreview(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pageNumber As Integer, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal assetId As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> String
        Dim results() As Object = Me.Invoke("getAssetPreview", New Object() {sessionId, catalogId, pageNumber, assetId})
        Return CType(results(0),String)
    End Function
    
    '''<remarks/>
    Public Function BegingetAssetPreview(ByVal sessionId As String, ByVal catalogId As String, ByVal pageNumber As Integer, ByVal assetId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("getAssetPreview", New Object() {sessionId, catalogId, pageNumber, assetId}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndgetAssetPreview(ByVal asyncResult As System.IAsyncResult) As String
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),String)
    End Function
    
    '''<remarks/>
    Public Overloads Sub getAssetPreviewAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal pageNumber As Integer, ByVal assetId As String)
        Me.getAssetPreviewAsync(sessionId, catalogId, pageNumber, assetId, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub getAssetPreviewAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal pageNumber As Integer, ByVal assetId As String, ByVal userState As Object)
        If (Me.getAssetPreviewOperationCompleted Is Nothing) Then
            Me.getAssetPreviewOperationCompleted = AddressOf Me.OngetAssetPreviewOperationCompleted
        End If
        Me.InvokeAsync("getAssetPreview", New Object() {sessionId, catalogId, pageNumber, assetId}, Me.getAssetPreviewOperationCompleted, userState)
    End Sub
    
    Private Sub OngetAssetPreviewOperationCompleted(ByVal arg As Object)
        If (Not (Me.getAssetPreviewCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent getAssetPreviewCompleted(Me, New getAssetPreviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function getAssets(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal assets As assetQuery, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal resultOptions As assetQueryResultOptions) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> assetQueryResults
        Dim results() As Object = Me.Invoke("getAssets", New Object() {sessionId, catalogId, assets, resultOptions})
        Return CType(results(0),assetQueryResults)
    End Function
    
    '''<remarks/>
    Public Function BegingetAssets(ByVal sessionId As String, ByVal catalogId As String, ByVal assets As assetQuery, ByVal resultOptions As assetQueryResultOptions, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("getAssets", New Object() {sessionId, catalogId, assets, resultOptions}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndgetAssets(ByVal asyncResult As System.IAsyncResult) As assetQueryResults
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),assetQueryResults)
    End Function
    
    '''<remarks/>
    Public Overloads Sub getAssetsAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal assets As assetQuery, ByVal resultOptions As assetQueryResultOptions)
        Me.getAssetsAsync(sessionId, catalogId, assets, resultOptions, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub getAssetsAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal assets As assetQuery, ByVal resultOptions As assetQueryResultOptions, ByVal userState As Object)
        If (Me.getAssetsOperationCompleted Is Nothing) Then
            Me.getAssetsOperationCompleted = AddressOf Me.OngetAssetsOperationCompleted
        End If
        Me.InvokeAsync("getAssets", New Object() {sessionId, catalogId, assets, resultOptions}, Me.getAssetsOperationCompleted, userState)
    End Sub
    
    Private Sub OngetAssetsOperationCompleted(ByVal arg As Object)
        If (Not (Me.getAssetsCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent getAssetsCompleted(Me, New getAssetsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function getAutomationScripts(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> String()
        Dim results() As Object = Me.Invoke("getAutomationScripts", New Object() {sessionId, catalogId})
        Return CType(results(0),String())
    End Function
    
    '''<remarks/>
    Public Function BegingetAutomationScripts(ByVal sessionId As String, ByVal catalogId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("getAutomationScripts", New Object() {sessionId, catalogId}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndgetAutomationScripts(ByVal asyncResult As System.IAsyncResult) As String()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),String())
    End Function
    
    '''<remarks/>
    Public Overloads Sub getAutomationScriptsAsync(ByVal sessionId As String, ByVal catalogId As String)
        Me.getAutomationScriptsAsync(sessionId, catalogId, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub getAutomationScriptsAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal userState As Object)
        If (Me.getAutomationScriptsOperationCompleted Is Nothing) Then
            Me.getAutomationScriptsOperationCompleted = AddressOf Me.OngetAutomationScriptsOperationCompleted
        End If
        Me.InvokeAsync("getAutomationScripts", New Object() {sessionId, catalogId}, Me.getAutomationScriptsOperationCompleted, userState)
    End Sub
    
    Private Sub OngetAutomationScriptsOperationCompleted(ByVal arg As Object)
        If (Not (Me.getAutomationScriptsCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent getAutomationScriptsCompleted(Me, New getAutomationScriptsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function getCatalogPermissions(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> catalogPermissions()
        Dim results() As Object = Me.Invoke("getCatalogPermissions", New Object() {sessionId})
        Return CType(results(0),catalogPermissions())
    End Function
    
    '''<remarks/>
    Public Function BegingetCatalogPermissions(ByVal sessionId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("getCatalogPermissions", New Object() {sessionId}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndgetCatalogPermissions(ByVal asyncResult As System.IAsyncResult) As catalogPermissions()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),catalogPermissions())
    End Function
    
    '''<remarks/>
    Public Overloads Sub getCatalogPermissionsAsync(ByVal sessionId As String)
        Me.getCatalogPermissionsAsync(sessionId, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub getCatalogPermissionsAsync(ByVal sessionId As String, ByVal userState As Object)
        If (Me.getCatalogPermissionsOperationCompleted Is Nothing) Then
            Me.getCatalogPermissionsOperationCompleted = AddressOf Me.OngetCatalogPermissionsOperationCompleted
        End If
        Me.InvokeAsync("getCatalogPermissions", New Object() {sessionId}, Me.getCatalogPermissionsOperationCompleted, userState)
    End Sub
    
    Private Sub OngetCatalogPermissionsOperationCompleted(ByVal arg As Object)
        If (Not (Me.getCatalogPermissionsCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent getCatalogPermissionsCompleted(Me, New getCatalogPermissionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function getCatalogs(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> catalog()
        Dim results() As Object = Me.Invoke("getCatalogs", New Object() {sessionId})
        Return CType(results(0),catalog())
    End Function
    
    '''<remarks/>
    Public Function BegingetCatalogs(ByVal sessionId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("getCatalogs", New Object() {sessionId}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndgetCatalogs(ByVal asyncResult As System.IAsyncResult) As catalog()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),catalog())
    End Function
    
    '''<remarks/>
    Public Overloads Sub getCatalogsAsync(ByVal sessionId As String)
        Me.getCatalogsAsync(sessionId, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub getCatalogsAsync(ByVal sessionId As String, ByVal userState As Object)
        If (Me.getCatalogsOperationCompleted Is Nothing) Then
            Me.getCatalogsOperationCompleted = AddressOf Me.OngetCatalogsOperationCompleted
        End If
        Me.InvokeAsync("getCatalogs", New Object() {sessionId}, Me.getCatalogsOperationCompleted, userState)
    End Sub
    
    Private Sub OngetCatalogsOperationCompleted(ByVal arg As Object)
        If (Not (Me.getCatalogsCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent getCatalogsCompleted(Me, New getCatalogsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function getDetailsForWatchFolder(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal watchFolderId As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> attribute()
        Dim results() As Object = Me.Invoke("getDetailsForWatchFolder", New Object() {sessionId, catalogId, watchFolderId})
        Return CType(results(0),attribute())
    End Function
    
    '''<remarks/>
    Public Function BegingetDetailsForWatchFolder(ByVal sessionId As String, ByVal catalogId As String, ByVal watchFolderId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("getDetailsForWatchFolder", New Object() {sessionId, catalogId, watchFolderId}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndgetDetailsForWatchFolder(ByVal asyncResult As System.IAsyncResult) As attribute()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),attribute())
    End Function
    
    '''<remarks/>
    Public Overloads Sub getDetailsForWatchFolderAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal watchFolderId As String)
        Me.getDetailsForWatchFolderAsync(sessionId, catalogId, watchFolderId, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub getDetailsForWatchFolderAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal watchFolderId As String, ByVal userState As Object)
        If (Me.getDetailsForWatchFolderOperationCompleted Is Nothing) Then
            Me.getDetailsForWatchFolderOperationCompleted = AddressOf Me.OngetDetailsForWatchFolderOperationCompleted
        End If
        Me.InvokeAsync("getDetailsForWatchFolder", New Object() {sessionId, catalogId, watchFolderId}, Me.getDetailsForWatchFolderOperationCompleted, userState)
    End Sub
    
    Private Sub OngetDetailsForWatchFolderOperationCompleted(ByVal arg As Object)
        If (Not (Me.getDetailsForWatchFolderCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent getDetailsForWatchFolderCompleted(Me, New getDetailsForWatchFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function getErrorDetailsForJob(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal jobId As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> attribute()
        Dim results() As Object = Me.Invoke("getErrorDetailsForJob", New Object() {sessionId, jobId})
        Return CType(results(0),attribute())
    End Function
    
    '''<remarks/>
    Public Function BegingetErrorDetailsForJob(ByVal sessionId As String, ByVal jobId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("getErrorDetailsForJob", New Object() {sessionId, jobId}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndgetErrorDetailsForJob(ByVal asyncResult As System.IAsyncResult) As attribute()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),attribute())
    End Function
    
    '''<remarks/>
    Public Overloads Sub getErrorDetailsForJobAsync(ByVal sessionId As String, ByVal jobId As String)
        Me.getErrorDetailsForJobAsync(sessionId, jobId, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub getErrorDetailsForJobAsync(ByVal sessionId As String, ByVal jobId As String, ByVal userState As Object)
        If (Me.getErrorDetailsForJobOperationCompleted Is Nothing) Then
            Me.getErrorDetailsForJobOperationCompleted = AddressOf Me.OngetErrorDetailsForJobOperationCompleted
        End If
        Me.InvokeAsync("getErrorDetailsForJob", New Object() {sessionId, jobId}, Me.getErrorDetailsForJobOperationCompleted, userState)
    End Sub
    
    Private Sub OngetErrorDetailsForJobOperationCompleted(ByVal arg As Object)
        If (Not (Me.getErrorDetailsForJobCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent getErrorDetailsForJobCompleted(Me, New getErrorDetailsForJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function getFieldDefinitions(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute("fieldNames", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> ByVal fieldNames() As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal getPredefinedValues As Boolean, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified), System.Xml.Serialization.XmlIgnoreAttribute()> ByVal getPredefinedValuesSpecified As Boolean) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> fieldDefinition()
        Dim results() As Object = Me.Invoke("getFieldDefinitions", New Object() {sessionId, catalogId, fieldNames, getPredefinedValues, getPredefinedValuesSpecified})
        Return CType(results(0),fieldDefinition())
    End Function
    
    '''<remarks/>
    Public Function BegingetFieldDefinitions(ByVal sessionId As String, ByVal catalogId As String, ByVal fieldNames() As String, ByVal getPredefinedValues As Boolean, ByVal getPredefinedValuesSpecified As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("getFieldDefinitions", New Object() {sessionId, catalogId, fieldNames, getPredefinedValues, getPredefinedValuesSpecified}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndgetFieldDefinitions(ByVal asyncResult As System.IAsyncResult) As fieldDefinition()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),fieldDefinition())
    End Function
    
    '''<remarks/>
    Public Overloads Sub getFieldDefinitionsAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal fieldNames() As String, ByVal getPredefinedValues As Boolean, ByVal getPredefinedValuesSpecified As Boolean)
        Me.getFieldDefinitionsAsync(sessionId, catalogId, fieldNames, getPredefinedValues, getPredefinedValuesSpecified, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub getFieldDefinitionsAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal fieldNames() As String, ByVal getPredefinedValues As Boolean, ByVal getPredefinedValuesSpecified As Boolean, ByVal userState As Object)
        If (Me.getFieldDefinitionsOperationCompleted Is Nothing) Then
            Me.getFieldDefinitionsOperationCompleted = AddressOf Me.OngetFieldDefinitionsOperationCompleted
        End If
        Me.InvokeAsync("getFieldDefinitions", New Object() {sessionId, catalogId, fieldNames, getPredefinedValues, getPredefinedValuesSpecified}, Me.getFieldDefinitionsOperationCompleted, userState)
    End Sub
    
    Private Sub OngetFieldDefinitionsOperationCompleted(ByVal arg As Object)
        If (Not (Me.getFieldDefinitionsCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent getFieldDefinitionsCompleted(Me, New getFieldDefinitionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Sub addOrRemovePredefinedValues(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal fieldDefinition As fieldDefinition, <System.Xml.Serialization.XmlElementAttribute("addPredefinedValues", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal addPredefinedValues() As String, <System.Xml.Serialization.XmlElementAttribute("removePredefinedValues", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal removePredefinedValues() As String)
        Me.Invoke("addOrRemovePredefinedValues", New Object() {sessionId, catalogId, fieldDefinition, addPredefinedValues, removePredefinedValues})
    End Sub
    
    '''<remarks/>
    Public Function BeginaddOrRemovePredefinedValues(ByVal sessionId As String, ByVal catalogId As String, ByVal fieldDefinition As fieldDefinition, ByVal addPredefinedValues() As String, ByVal removePredefinedValues() As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("addOrRemovePredefinedValues", New Object() {sessionId, catalogId, fieldDefinition, addPredefinedValues, removePredefinedValues}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Sub EndaddOrRemovePredefinedValues(ByVal asyncResult As System.IAsyncResult)
        Me.EndInvoke(asyncResult)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub addOrRemovePredefinedValuesAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal fieldDefinition As fieldDefinition, ByVal addPredefinedValues() As String, ByVal removePredefinedValues() As String)
        Me.addOrRemovePredefinedValuesAsync(sessionId, catalogId, fieldDefinition, addPredefinedValues, removePredefinedValues, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub addOrRemovePredefinedValuesAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal fieldDefinition As fieldDefinition, ByVal addPredefinedValues() As String, ByVal removePredefinedValues() As String, ByVal userState As Object)
        If (Me.addOrRemovePredefinedValuesOperationCompleted Is Nothing) Then
            Me.addOrRemovePredefinedValuesOperationCompleted = AddressOf Me.OnaddOrRemovePredefinedValuesOperationCompleted
        End If
        Me.InvokeAsync("addOrRemovePredefinedValues", New Object() {sessionId, catalogId, fieldDefinition, addPredefinedValues, removePredefinedValues}, Me.addOrRemovePredefinedValuesOperationCompleted, userState)
    End Sub
    
    Private Sub OnaddOrRemovePredefinedValuesOperationCompleted(ByVal arg As Object)
        If (Not (Me.addOrRemovePredefinedValuesCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent addOrRemovePredefinedValuesCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Sub setPredefinedValues(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal fieldDefinition As fieldDefinition, <System.Xml.Serialization.XmlElementAttribute("predefinedValues", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal predefinedValues() As String)
        Me.Invoke("setPredefinedValues", New Object() {sessionId, catalogId, fieldDefinition, predefinedValues})
    End Sub
    
    '''<remarks/>
    Public Function BeginsetPredefinedValues(ByVal sessionId As String, ByVal catalogId As String, ByVal fieldDefinition As fieldDefinition, ByVal predefinedValues() As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("setPredefinedValues", New Object() {sessionId, catalogId, fieldDefinition, predefinedValues}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Sub EndsetPredefinedValues(ByVal asyncResult As System.IAsyncResult)
        Me.EndInvoke(asyncResult)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub setPredefinedValuesAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal fieldDefinition As fieldDefinition, ByVal predefinedValues() As String)
        Me.setPredefinedValuesAsync(sessionId, catalogId, fieldDefinition, predefinedValues, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub setPredefinedValuesAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal fieldDefinition As fieldDefinition, ByVal predefinedValues() As String, ByVal userState As Object)
        If (Me.setPredefinedValuesOperationCompleted Is Nothing) Then
            Me.setPredefinedValuesOperationCompleted = AddressOf Me.OnsetPredefinedValuesOperationCompleted
        End If
        Me.InvokeAsync("setPredefinedValues", New Object() {sessionId, catalogId, fieldDefinition, predefinedValues}, Me.setPredefinedValuesOperationCompleted, userState)
    End Sub
    
    Private Sub OnsetPredefinedValuesOperationCompleted(ByVal arg As Object)
        If (Not (Me.setPredefinedValuesCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent setPredefinedValuesCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function addNestedPredefinedValues(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal fieldDefinitionId As String, <System.Xml.Serialization.XmlElementAttribute("newValueList", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal newValueList() As nestedValue, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal parentId As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> nestedValue()
        Dim results() As Object = Me.Invoke("addNestedPredefinedValues", New Object() {sessionId, catalogId, fieldDefinitionId, newValueList, parentId})
        Return CType(results(0),nestedValue())
    End Function
    
    '''<remarks/>
    Public Function BeginaddNestedPredefinedValues(ByVal sessionId As String, ByVal catalogId As String, ByVal fieldDefinitionId As String, ByVal newValueList() As nestedValue, ByVal parentId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("addNestedPredefinedValues", New Object() {sessionId, catalogId, fieldDefinitionId, newValueList, parentId}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndaddNestedPredefinedValues(ByVal asyncResult As System.IAsyncResult) As nestedValue()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),nestedValue())
    End Function
    
    '''<remarks/>
    Public Overloads Sub addNestedPredefinedValuesAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal fieldDefinitionId As String, ByVal newValueList() As nestedValue, ByVal parentId As String)
        Me.addNestedPredefinedValuesAsync(sessionId, catalogId, fieldDefinitionId, newValueList, parentId, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub addNestedPredefinedValuesAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal fieldDefinitionId As String, ByVal newValueList() As nestedValue, ByVal parentId As String, ByVal userState As Object)
        If (Me.addNestedPredefinedValuesOperationCompleted Is Nothing) Then
            Me.addNestedPredefinedValuesOperationCompleted = AddressOf Me.OnaddNestedPredefinedValuesOperationCompleted
        End If
        Me.InvokeAsync("addNestedPredefinedValues", New Object() {sessionId, catalogId, fieldDefinitionId, newValueList, parentId}, Me.addNestedPredefinedValuesOperationCompleted, userState)
    End Sub
    
    Private Sub OnaddNestedPredefinedValuesOperationCompleted(ByVal arg As Object)
        If (Not (Me.addNestedPredefinedValuesCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent addNestedPredefinedValuesCompleted(Me, New addNestedPredefinedValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Sub changeNestedPredefinedValue(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal fieldDefinitionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal nestedValueId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal newValue As String)
        Me.Invoke("changeNestedPredefinedValue", New Object() {sessionId, catalogId, fieldDefinitionId, nestedValueId, newValue})
    End Sub
    
    '''<remarks/>
    Public Function BeginchangeNestedPredefinedValue(ByVal sessionId As String, ByVal catalogId As String, ByVal fieldDefinitionId As String, ByVal nestedValueId As String, ByVal newValue As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("changeNestedPredefinedValue", New Object() {sessionId, catalogId, fieldDefinitionId, nestedValueId, newValue}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Sub EndchangeNestedPredefinedValue(ByVal asyncResult As System.IAsyncResult)
        Me.EndInvoke(asyncResult)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub changeNestedPredefinedValueAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal fieldDefinitionId As String, ByVal nestedValueId As String, ByVal newValue As String)
        Me.changeNestedPredefinedValueAsync(sessionId, catalogId, fieldDefinitionId, nestedValueId, newValue, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub changeNestedPredefinedValueAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal fieldDefinitionId As String, ByVal nestedValueId As String, ByVal newValue As String, ByVal userState As Object)
        If (Me.changeNestedPredefinedValueOperationCompleted Is Nothing) Then
            Me.changeNestedPredefinedValueOperationCompleted = AddressOf Me.OnchangeNestedPredefinedValueOperationCompleted
        End If
        Me.InvokeAsync("changeNestedPredefinedValue", New Object() {sessionId, catalogId, fieldDefinitionId, nestedValueId, newValue}, Me.changeNestedPredefinedValueOperationCompleted, userState)
    End Sub
    
    Private Sub OnchangeNestedPredefinedValueOperationCompleted(ByVal arg As Object)
        If (Not (Me.changeNestedPredefinedValueCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent changeNestedPredefinedValueCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Sub moveNestedPredefinedValue(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal fieldDefinitionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal nestedValueId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal newParentId As String)
        Me.Invoke("moveNestedPredefinedValue", New Object() {sessionId, catalogId, fieldDefinitionId, nestedValueId, newParentId})
    End Sub
    
    '''<remarks/>
    Public Function BeginmoveNestedPredefinedValue(ByVal sessionId As String, ByVal catalogId As String, ByVal fieldDefinitionId As String, ByVal nestedValueId As String, ByVal newParentId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("moveNestedPredefinedValue", New Object() {sessionId, catalogId, fieldDefinitionId, nestedValueId, newParentId}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Sub EndmoveNestedPredefinedValue(ByVal asyncResult As System.IAsyncResult)
        Me.EndInvoke(asyncResult)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub moveNestedPredefinedValueAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal fieldDefinitionId As String, ByVal nestedValueId As String, ByVal newParentId As String)
        Me.moveNestedPredefinedValueAsync(sessionId, catalogId, fieldDefinitionId, nestedValueId, newParentId, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub moveNestedPredefinedValueAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal fieldDefinitionId As String, ByVal nestedValueId As String, ByVal newParentId As String, ByVal userState As Object)
        If (Me.moveNestedPredefinedValueOperationCompleted Is Nothing) Then
            Me.moveNestedPredefinedValueOperationCompleted = AddressOf Me.OnmoveNestedPredefinedValueOperationCompleted
        End If
        Me.InvokeAsync("moveNestedPredefinedValue", New Object() {sessionId, catalogId, fieldDefinitionId, nestedValueId, newParentId}, Me.moveNestedPredefinedValueOperationCompleted, userState)
    End Sub
    
    Private Sub OnmoveNestedPredefinedValueOperationCompleted(ByVal arg As Object)
        If (Not (Me.moveNestedPredefinedValueCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent moveNestedPredefinedValueCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Sub deleteNestedPredefinedValues(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal fieldDefinitionId As String, <System.Xml.Serialization.XmlElementAttribute("nestedValueIds", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal nestedValueIds() As String)
        Me.Invoke("deleteNestedPredefinedValues", New Object() {sessionId, catalogId, fieldDefinitionId, nestedValueIds})
    End Sub
    
    '''<remarks/>
    Public Function BegindeleteNestedPredefinedValues(ByVal sessionId As String, ByVal catalogId As String, ByVal fieldDefinitionId As String, ByVal nestedValueIds() As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("deleteNestedPredefinedValues", New Object() {sessionId, catalogId, fieldDefinitionId, nestedValueIds}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Sub EnddeleteNestedPredefinedValues(ByVal asyncResult As System.IAsyncResult)
        Me.EndInvoke(asyncResult)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub deleteNestedPredefinedValuesAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal fieldDefinitionId As String, ByVal nestedValueIds() As String)
        Me.deleteNestedPredefinedValuesAsync(sessionId, catalogId, fieldDefinitionId, nestedValueIds, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub deleteNestedPredefinedValuesAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal fieldDefinitionId As String, ByVal nestedValueIds() As String, ByVal userState As Object)
        If (Me.deleteNestedPredefinedValuesOperationCompleted Is Nothing) Then
            Me.deleteNestedPredefinedValuesOperationCompleted = AddressOf Me.OndeleteNestedPredefinedValuesOperationCompleted
        End If
        Me.InvokeAsync("deleteNestedPredefinedValues", New Object() {sessionId, catalogId, fieldDefinitionId, nestedValueIds}, Me.deleteNestedPredefinedValuesOperationCompleted, userState)
    End Sub
    
    Private Sub OndeleteNestedPredefinedValuesOperationCompleted(ByVal arg As Object)
        If (Not (Me.deleteNestedPredefinedValuesCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent deleteNestedPredefinedValuesCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function getFolderTreeForWatchFolder(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal watchFolderId As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> folder
        Dim results() As Object = Me.Invoke("getFolderTreeForWatchFolder", New Object() {sessionId, catalogId, watchFolderId})
        Return CType(results(0),folder)
    End Function
    
    '''<remarks/>
    Public Function BegingetFolderTreeForWatchFolder(ByVal sessionId As String, ByVal catalogId As String, ByVal watchFolderId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("getFolderTreeForWatchFolder", New Object() {sessionId, catalogId, watchFolderId}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndgetFolderTreeForWatchFolder(ByVal asyncResult As System.IAsyncResult) As folder
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),folder)
    End Function
    
    '''<remarks/>
    Public Overloads Sub getFolderTreeForWatchFolderAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal watchFolderId As String)
        Me.getFolderTreeForWatchFolderAsync(sessionId, catalogId, watchFolderId, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub getFolderTreeForWatchFolderAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal watchFolderId As String, ByVal userState As Object)
        If (Me.getFolderTreeForWatchFolderOperationCompleted Is Nothing) Then
            Me.getFolderTreeForWatchFolderOperationCompleted = AddressOf Me.OngetFolderTreeForWatchFolderOperationCompleted
        End If
        Me.InvokeAsync("getFolderTreeForWatchFolder", New Object() {sessionId, catalogId, watchFolderId}, Me.getFolderTreeForWatchFolderOperationCompleted, userState)
    End Sub
    
    Private Sub OngetFolderTreeForWatchFolderOperationCompleted(ByVal arg As Object)
        If (Not (Me.getFolderTreeForWatchFolderCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent getFolderTreeForWatchFolderCompleted(Me, New getFolderTreeForWatchFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function getGalleries(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> gallery()
        Dim results() As Object = Me.Invoke("getGalleries", New Object() {sessionId, catalogId})
        Return CType(results(0),gallery())
    End Function
    
    '''<remarks/>
    Public Function BegingetGalleries(ByVal sessionId As String, ByVal catalogId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("getGalleries", New Object() {sessionId, catalogId}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndgetGalleries(ByVal asyncResult As System.IAsyncResult) As gallery()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),gallery())
    End Function
    
    '''<remarks/>
    Public Overloads Sub getGalleriesAsync(ByVal sessionId As String, ByVal catalogId As String)
        Me.getGalleriesAsync(sessionId, catalogId, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub getGalleriesAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal userState As Object)
        If (Me.getGalleriesOperationCompleted Is Nothing) Then
            Me.getGalleriesOperationCompleted = AddressOf Me.OngetGalleriesOperationCompleted
        End If
        Me.InvokeAsync("getGalleries", New Object() {sessionId, catalogId}, Me.getGalleriesOperationCompleted, userState)
    End Sub
    
    Private Sub OngetGalleriesOperationCompleted(ByVal arg As Object)
        If (Not (Me.getGalleriesCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent getGalleriesCompleted(Me, New getGalleriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function getJobIDs(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> String()
        Dim results() As Object = Me.Invoke("getJobIDs", New Object() {sessionId})
        Return CType(results(0),String())
    End Function
    
    '''<remarks/>
    Public Function BegingetJobIDs(ByVal sessionId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("getJobIDs", New Object() {sessionId}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndgetJobIDs(ByVal asyncResult As System.IAsyncResult) As String()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),String())
    End Function
    
    '''<remarks/>
    Public Overloads Sub getJobIDsAsync(ByVal sessionId As String)
        Me.getJobIDsAsync(sessionId, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub getJobIDsAsync(ByVal sessionId As String, ByVal userState As Object)
        If (Me.getJobIDsOperationCompleted Is Nothing) Then
            Me.getJobIDsOperationCompleted = AddressOf Me.OngetJobIDsOperationCompleted
        End If
        Me.InvokeAsync("getJobIDs", New Object() {sessionId}, Me.getJobIDsOperationCompleted, userState)
    End Sub
    
    Private Sub OngetJobIDsOperationCompleted(ByVal arg As Object)
        If (Not (Me.getJobIDsCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent getJobIDsCompleted(Me, New getJobIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function getRSAPublicEncryptionKey() As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> keySpecification
        Dim results() As Object = Me.Invoke("getRSAPublicEncryptionKey", New Object(-1) {})
        Return CType(results(0),keySpecification)
    End Function
    
    '''<remarks/>
    Public Function BegingetRSAPublicEncryptionKey(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("getRSAPublicEncryptionKey", New Object(-1) {}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndgetRSAPublicEncryptionKey(ByVal asyncResult As System.IAsyncResult) As keySpecification
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),keySpecification)
    End Function
    
    '''<remarks/>
    Public Overloads Sub getRSAPublicEncryptionKeyAsync()
        Me.getRSAPublicEncryptionKeyAsync(Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub getRSAPublicEncryptionKeyAsync(ByVal userState As Object)
        If (Me.getRSAPublicEncryptionKeyOperationCompleted Is Nothing) Then
            Me.getRSAPublicEncryptionKeyOperationCompleted = AddressOf Me.OngetRSAPublicEncryptionKeyOperationCompleted
        End If
        Me.InvokeAsync("getRSAPublicEncryptionKey", New Object(-1) {}, Me.getRSAPublicEncryptionKeyOperationCompleted, userState)
    End Sub
    
    Private Sub OngetRSAPublicEncryptionKeyOperationCompleted(ByVal arg As Object)
        If (Not (Me.getRSAPublicEncryptionKeyCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent getRSAPublicEncryptionKeyCompleted(Me, New getRSAPublicEncryptionKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function getServerFeatures(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> String()
        Dim results() As Object = Me.Invoke("getServerFeatures", New Object() {sessionId})
        Return CType(results(0),String())
    End Function
    
    '''<remarks/>
    Public Function BegingetServerFeatures(ByVal sessionId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("getServerFeatures", New Object() {sessionId}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndgetServerFeatures(ByVal asyncResult As System.IAsyncResult) As String()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),String())
    End Function
    
    '''<remarks/>
    Public Overloads Sub getServerFeaturesAsync(ByVal sessionId As String)
        Me.getServerFeaturesAsync(sessionId, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub getServerFeaturesAsync(ByVal sessionId As String, ByVal userState As Object)
        If (Me.getServerFeaturesOperationCompleted Is Nothing) Then
            Me.getServerFeaturesOperationCompleted = AddressOf Me.OngetServerFeaturesOperationCompleted
        End If
        Me.InvokeAsync("getServerFeatures", New Object() {sessionId}, Me.getServerFeaturesOperationCompleted, userState)
    End Sub
    
    Private Sub OngetServerFeaturesOperationCompleted(ByVal arg As Object)
        If (Not (Me.getServerFeaturesCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent getServerFeaturesCompleted(Me, New getServerFeaturesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function getServerSystemInformation(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> attribute()
        Dim results() As Object = Me.Invoke("getServerSystemInformation", New Object() {sessionId})
        Return CType(results(0),attribute())
    End Function
    
    '''<remarks/>
    Public Function BegingetServerSystemInformation(ByVal sessionId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("getServerSystemInformation", New Object() {sessionId}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndgetServerSystemInformation(ByVal asyncResult As System.IAsyncResult) As attribute()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),attribute())
    End Function
    
    '''<remarks/>
    Public Overloads Sub getServerSystemInformationAsync(ByVal sessionId As String)
        Me.getServerSystemInformationAsync(sessionId, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub getServerSystemInformationAsync(ByVal sessionId As String, ByVal userState As Object)
        If (Me.getServerSystemInformationOperationCompleted Is Nothing) Then
            Me.getServerSystemInformationOperationCompleted = AddressOf Me.OngetServerSystemInformationOperationCompleted
        End If
        Me.InvokeAsync("getServerSystemInformation", New Object() {sessionId}, Me.getServerSystemInformationOperationCompleted, userState)
    End Sub
    
    Private Sub OngetServerSystemInformationOperationCompleted(ByVal arg As Object)
        If (Not (Me.getServerSystemInformationCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent getServerSystemInformationCompleted(Me, New getServerSystemInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function getStatusForJobs(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute("jobIds", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> ByVal jobIds() As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> jobStatus()
        Dim results() As Object = Me.Invoke("getStatusForJobs", New Object() {sessionId, jobIds})
        Return CType(results(0),jobStatus())
    End Function
    
    '''<remarks/>
    Public Function BegingetStatusForJobs(ByVal sessionId As String, ByVal jobIds() As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("getStatusForJobs", New Object() {sessionId, jobIds}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndgetStatusForJobs(ByVal asyncResult As System.IAsyncResult) As jobStatus()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),jobStatus())
    End Function
    
    '''<remarks/>
    Public Overloads Sub getStatusForJobsAsync(ByVal sessionId As String, ByVal jobIds() As String)
        Me.getStatusForJobsAsync(sessionId, jobIds, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub getStatusForJobsAsync(ByVal sessionId As String, ByVal jobIds() As String, ByVal userState As Object)
        If (Me.getStatusForJobsOperationCompleted Is Nothing) Then
            Me.getStatusForJobsOperationCompleted = AddressOf Me.OngetStatusForJobsOperationCompleted
        End If
        Me.InvokeAsync("getStatusForJobs", New Object() {sessionId, jobIds}, Me.getStatusForJobsOperationCompleted, userState)
    End Sub
    
    Private Sub OngetStatusForJobsOperationCompleted(ByVal arg As Object)
        If (Not (Me.getStatusForJobsCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent getStatusForJobsCompleted(Me, New getStatusForJobsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function getWatchFolders(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> watchFolder()
        Dim results() As Object = Me.Invoke("getWatchFolders", New Object() {sessionId, catalogId})
        Return CType(results(0),watchFolder())
    End Function
    
    '''<remarks/>
    Public Function BegingetWatchFolders(ByVal sessionId As String, ByVal catalogId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("getWatchFolders", New Object() {sessionId, catalogId}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndgetWatchFolders(ByVal asyncResult As System.IAsyncResult) As watchFolder()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),watchFolder())
    End Function
    
    '''<remarks/>
    Public Overloads Sub getWatchFoldersAsync(ByVal sessionId As String, ByVal catalogId As String)
        Me.getWatchFoldersAsync(sessionId, catalogId, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub getWatchFoldersAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal userState As Object)
        If (Me.getWatchFoldersOperationCompleted Is Nothing) Then
            Me.getWatchFoldersOperationCompleted = AddressOf Me.OngetWatchFoldersOperationCompleted
        End If
        Me.InvokeAsync("getWatchFolders", New Object() {sessionId, catalogId}, Me.getWatchFoldersOperationCompleted, userState)
    End Sub
    
    Private Sub OngetWatchFoldersOperationCompleted(ByVal arg As Object)
        If (Not (Me.getWatchFoldersCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent getWatchFoldersCompleted(Me, New getWatchFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function login(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal userName As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal encryptedPassword As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> String
        Dim results() As Object = Me.Invoke("login", New Object() {userName, encryptedPassword})
        Return CType(results(0),String)
    End Function
    
    '''<remarks/>
    Public Function Beginlogin(ByVal userName As String, ByVal encryptedPassword As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("login", New Object() {userName, encryptedPassword}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function Endlogin(ByVal asyncResult As System.IAsyncResult) As String
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),String)
    End Function
    
    '''<remarks/>
    Public Overloads Sub loginAsync(ByVal userName As String, ByVal encryptedPassword As String)
        Me.loginAsync(userName, encryptedPassword, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub loginAsync(ByVal userName As String, ByVal encryptedPassword As String, ByVal userState As Object)
        If (Me.loginOperationCompleted Is Nothing) Then
            Me.loginOperationCompleted = AddressOf Me.OnloginOperationCompleted
        End If
        Me.InvokeAsync("login", New Object() {userName, encryptedPassword}, Me.loginOperationCompleted, userState)
    End Sub
    
    Private Sub OnloginOperationCompleted(ByVal arg As Object)
        If (Not (Me.loginCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent loginCompleted(Me, New loginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Sub logout(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String)
        Me.Invoke("logout", New Object() {sessionId})
    End Sub
    
    '''<remarks/>
    Public Function Beginlogout(ByVal sessionId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("logout", New Object() {sessionId}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Sub Endlogout(ByVal asyncResult As System.IAsyncResult)
        Me.EndInvoke(asyncResult)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub logoutAsync(ByVal sessionId As String)
        Me.logoutAsync(sessionId, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub logoutAsync(ByVal sessionId As String, ByVal userState As Object)
        If (Me.logoutOperationCompleted Is Nothing) Then
            Me.logoutOperationCompleted = AddressOf Me.OnlogoutOperationCompleted
        End If
        Me.InvokeAsync("logout", New Object() {sessionId}, Me.logoutOperationCompleted, userState)
    End Sub
    
    Private Sub OnlogoutOperationCompleted(ByVal arg As Object)
        If (Not (Me.logoutCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent logoutCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Sub moveSubfolder(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sourceWatchFolderId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sourceRelativeFolderPath As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal destinationWatchFolderId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal destinationRelativeFolderPath As String)
        Me.Invoke("moveSubfolder", New Object() {sessionId, catalogId, sourceWatchFolderId, sourceRelativeFolderPath, destinationWatchFolderId, destinationRelativeFolderPath})
    End Sub
    
    '''<remarks/>
    Public Function BeginmoveSubfolder(ByVal sessionId As String, ByVal catalogId As String, ByVal sourceWatchFolderId As String, ByVal sourceRelativeFolderPath As String, ByVal destinationWatchFolderId As String, ByVal destinationRelativeFolderPath As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("moveSubfolder", New Object() {sessionId, catalogId, sourceWatchFolderId, sourceRelativeFolderPath, destinationWatchFolderId, destinationRelativeFolderPath}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Sub EndmoveSubfolder(ByVal asyncResult As System.IAsyncResult)
        Me.EndInvoke(asyncResult)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub moveSubfolderAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal sourceWatchFolderId As String, ByVal sourceRelativeFolderPath As String, ByVal destinationWatchFolderId As String, ByVal destinationRelativeFolderPath As String)
        Me.moveSubfolderAsync(sessionId, catalogId, sourceWatchFolderId, sourceRelativeFolderPath, destinationWatchFolderId, destinationRelativeFolderPath, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub moveSubfolderAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal sourceWatchFolderId As String, ByVal sourceRelativeFolderPath As String, ByVal destinationWatchFolderId As String, ByVal destinationRelativeFolderPath As String, ByVal userState As Object)
        If (Me.moveSubfolderOperationCompleted Is Nothing) Then
            Me.moveSubfolderOperationCompleted = AddressOf Me.OnmoveSubfolderOperationCompleted
        End If
        Me.InvokeAsync("moveSubfolder", New Object() {sessionId, catalogId, sourceWatchFolderId, sourceRelativeFolderPath, destinationWatchFolderId, destinationRelativeFolderPath}, Me.moveSubfolderOperationCompleted, userState)
    End Sub
    
    Private Sub OnmoveSubfolderOperationCompleted(ByVal arg As Object)
        If (Not (Me.moveSubfolderCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent moveSubfolderCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Sub removeAssetsFromCatalog(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal assets As assetQuery, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal deleteOriginalFromDisk As Boolean)
        Me.Invoke("removeAssetsFromCatalog", New Object() {sessionId, catalogId, assets, deleteOriginalFromDisk})
    End Sub
    
    '''<remarks/>
    Public Function BeginremoveAssetsFromCatalog(ByVal sessionId As String, ByVal catalogId As String, ByVal assets As assetQuery, ByVal deleteOriginalFromDisk As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("removeAssetsFromCatalog", New Object() {sessionId, catalogId, assets, deleteOriginalFromDisk}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Sub EndremoveAssetsFromCatalog(ByVal asyncResult As System.IAsyncResult)
        Me.EndInvoke(asyncResult)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub removeAssetsFromCatalogAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal assets As assetQuery, ByVal deleteOriginalFromDisk As Boolean)
        Me.removeAssetsFromCatalogAsync(sessionId, catalogId, assets, deleteOriginalFromDisk, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub removeAssetsFromCatalogAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal assets As assetQuery, ByVal deleteOriginalFromDisk As Boolean, ByVal userState As Object)
        If (Me.removeAssetsFromCatalogOperationCompleted Is Nothing) Then
            Me.removeAssetsFromCatalogOperationCompleted = AddressOf Me.OnremoveAssetsFromCatalogOperationCompleted
        End If
        Me.InvokeAsync("removeAssetsFromCatalog", New Object() {sessionId, catalogId, assets, deleteOriginalFromDisk}, Me.removeAssetsFromCatalogOperationCompleted, userState)
    End Sub
    
    Private Sub OnremoveAssetsFromCatalogOperationCompleted(ByVal arg As Object)
        If (Not (Me.removeAssetsFromCatalogCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent removeAssetsFromCatalogCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Sub removeItemsFromGallery(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal galleryId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal assets As assetQuery)
        Me.Invoke("removeItemsFromGallery", New Object() {sessionId, catalogId, galleryId, assets})
    End Sub
    
    '''<remarks/>
    Public Function BeginremoveItemsFromGallery(ByVal sessionId As String, ByVal catalogId As String, ByVal galleryId As String, ByVal assets As assetQuery, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("removeItemsFromGallery", New Object() {sessionId, catalogId, galleryId, assets}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Sub EndremoveItemsFromGallery(ByVal asyncResult As System.IAsyncResult)
        Me.EndInvoke(asyncResult)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub removeItemsFromGalleryAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal galleryId As String, ByVal assets As assetQuery)
        Me.removeItemsFromGalleryAsync(sessionId, catalogId, galleryId, assets, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub removeItemsFromGalleryAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal galleryId As String, ByVal assets As assetQuery, ByVal userState As Object)
        If (Me.removeItemsFromGalleryOperationCompleted Is Nothing) Then
            Me.removeItemsFromGalleryOperationCompleted = AddressOf Me.OnremoveItemsFromGalleryOperationCompleted
        End If
        Me.InvokeAsync("removeItemsFromGallery", New Object() {sessionId, catalogId, galleryId, assets}, Me.removeItemsFromGalleryOperationCompleted, userState)
    End Sub
    
    Private Sub OnremoveItemsFromGalleryOperationCompleted(ByVal arg As Object)
        If (Not (Me.removeItemsFromGalleryCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent removeItemsFromGalleryCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function runJob(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal assets As assetQuery, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal job As job) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> String
        Dim results() As Object = Me.Invoke("runJob", New Object() {sessionId, catalogId, assets, job})
        Return CType(results(0),String)
    End Function
    
    '''<remarks/>
    Public Function BeginrunJob(ByVal sessionId As String, ByVal catalogId As String, ByVal assets As assetQuery, ByVal job As job, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("runJob", New Object() {sessionId, catalogId, assets, job}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndrunJob(ByVal asyncResult As System.IAsyncResult) As String
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),String)
    End Function
    
    '''<remarks/>
    Public Overloads Sub runJobAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal assets As assetQuery, ByVal job As job)
        Me.runJobAsync(sessionId, catalogId, assets, job, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub runJobAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal assets As assetQuery, ByVal job As job, ByVal userState As Object)
        If (Me.runJobOperationCompleted Is Nothing) Then
            Me.runJobOperationCompleted = AddressOf Me.OnrunJobOperationCompleted
        End If
        Me.InvokeAsync("runJob", New Object() {sessionId, catalogId, assets, job}, Me.runJobOperationCompleted, userState)
    End Sub
    
    Private Sub OnrunJobOperationCompleted(ByVal arg As Object)
        If (Not (Me.runJobCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent runJobCompleted(Me, New runJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function getCatalogingOptions(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> catalogingOptions
        Dim results() As Object = Me.Invoke("getCatalogingOptions", New Object() {sessionId, catalogId})
        Return CType(results(0),catalogingOptions)
    End Function
    
    '''<remarks/>
    Public Function BegingetCatalogingOptions(ByVal sessionId As String, ByVal catalogId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("getCatalogingOptions", New Object() {sessionId, catalogId}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndgetCatalogingOptions(ByVal asyncResult As System.IAsyncResult) As catalogingOptions
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),catalogingOptions)
    End Function
    
    '''<remarks/>
    Public Overloads Sub getCatalogingOptionsAsync(ByVal sessionId As String, ByVal catalogId As String)
        Me.getCatalogingOptionsAsync(sessionId, catalogId, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub getCatalogingOptionsAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal userState As Object)
        If (Me.getCatalogingOptionsOperationCompleted Is Nothing) Then
            Me.getCatalogingOptionsOperationCompleted = AddressOf Me.OngetCatalogingOptionsOperationCompleted
        End If
        Me.InvokeAsync("getCatalogingOptions", New Object() {sessionId, catalogId}, Me.getCatalogingOptionsOperationCompleted, userState)
    End Sub
    
    Private Sub OngetCatalogingOptionsOperationCompleted(ByVal arg As Object)
        If (Not (Me.getCatalogingOptionsCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent getCatalogingOptionsCompleted(Me, New getCatalogingOptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function getIngestConfig(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal getPredefinedValues As Boolean) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ingestConfig
        Dim results() As Object = Me.Invoke("getIngestConfig", New Object() {sessionId, catalogId, getPredefinedValues})
        Return CType(results(0),ingestConfig)
    End Function
    
    '''<remarks/>
    Public Function BegingetIngestConfig(ByVal sessionId As String, ByVal catalogId As String, ByVal getPredefinedValues As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("getIngestConfig", New Object() {sessionId, catalogId, getPredefinedValues}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndgetIngestConfig(ByVal asyncResult As System.IAsyncResult) As ingestConfig
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),ingestConfig)
    End Function
    
    '''<remarks/>
    Public Overloads Sub getIngestConfigAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal getPredefinedValues As Boolean)
        Me.getIngestConfigAsync(sessionId, catalogId, getPredefinedValues, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub getIngestConfigAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal getPredefinedValues As Boolean, ByVal userState As Object)
        If (Me.getIngestConfigOperationCompleted Is Nothing) Then
            Me.getIngestConfigOperationCompleted = AddressOf Me.OngetIngestConfigOperationCompleted
        End If
        Me.InvokeAsync("getIngestConfig", New Object() {sessionId, catalogId, getPredefinedValues}, Me.getIngestConfigOperationCompleted, userState)
    End Sub
    
    Private Sub OngetIngestConfigOperationCompleted(ByVal arg As Object)
        If (Not (Me.getIngestConfigCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent getIngestConfigCompleted(Me, New getIngestConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Sub synchronizeFolder(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal watchFolderId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal relativeFolderPath As String)
        Me.Invoke("synchronizeFolder", New Object() {sessionId, catalogId, watchFolderId, relativeFolderPath})
    End Sub
    
    '''<remarks/>
    Public Function BeginsynchronizeFolder(ByVal sessionId As String, ByVal catalogId As String, ByVal watchFolderId As String, ByVal relativeFolderPath As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("synchronizeFolder", New Object() {sessionId, catalogId, watchFolderId, relativeFolderPath}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Sub EndsynchronizeFolder(ByVal asyncResult As System.IAsyncResult)
        Me.EndInvoke(asyncResult)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub synchronizeFolderAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal watchFolderId As String, ByVal relativeFolderPath As String)
        Me.synchronizeFolderAsync(sessionId, catalogId, watchFolderId, relativeFolderPath, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub synchronizeFolderAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal watchFolderId As String, ByVal relativeFolderPath As String, ByVal userState As Object)
        If (Me.synchronizeFolderOperationCompleted Is Nothing) Then
            Me.synchronizeFolderOperationCompleted = AddressOf Me.OnsynchronizeFolderOperationCompleted
        End If
        Me.InvokeAsync("synchronizeFolder", New Object() {sessionId, catalogId, watchFolderId, relativeFolderPath}, Me.synchronizeFolderOperationCompleted, userState)
    End Sub
    
    Private Sub OnsynchronizeFolderOperationCompleted(ByVal arg As Object)
        If (Not (Me.synchronizeFolderCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent synchronizeFolderCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function getServerFolderNames(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal parentPath As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> String()
        Dim results() As Object = Me.Invoke("getServerFolderNames", New Object() {sessionId, parentPath})
        Return CType(results(0),String())
    End Function
    
    '''<remarks/>
    Public Function BegingetServerFolderNames(ByVal sessionId As String, ByVal parentPath As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("getServerFolderNames", New Object() {sessionId, parentPath}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndgetServerFolderNames(ByVal asyncResult As System.IAsyncResult) As String()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),String())
    End Function
    
    '''<remarks/>
    Public Overloads Sub getServerFolderNamesAsync(ByVal sessionId As String, ByVal parentPath As String)
        Me.getServerFolderNamesAsync(sessionId, parentPath, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub getServerFolderNamesAsync(ByVal sessionId As String, ByVal parentPath As String, ByVal userState As Object)
        If (Me.getServerFolderNamesOperationCompleted Is Nothing) Then
            Me.getServerFolderNamesOperationCompleted = AddressOf Me.OngetServerFolderNamesOperationCompleted
        End If
        Me.InvokeAsync("getServerFolderNames", New Object() {sessionId, parentPath}, Me.getServerFolderNamesOperationCompleted, userState)
    End Sub
    
    Private Sub OngetServerFolderNamesOperationCompleted(ByVal arg As Object)
        If (Not (Me.getServerFolderNamesCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent getServerFolderNamesCompleted(Me, New getServerFolderNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Sub updateAssetFieldValues(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal assets As assetQuery, <System.Xml.Serialization.XmlElementAttribute("changes", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> ByVal changes() As fieldValuesChange, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal embedChangesInOriginal As Boolean)
        Me.Invoke("updateAssetFieldValues", New Object() {sessionId, catalogId, assets, changes, embedChangesInOriginal})
    End Sub
    
    '''<remarks/>
    Public Function BeginupdateAssetFieldValues(ByVal sessionId As String, ByVal catalogId As String, ByVal assets As assetQuery, ByVal changes() As fieldValuesChange, ByVal embedChangesInOriginal As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("updateAssetFieldValues", New Object() {sessionId, catalogId, assets, changes, embedChangesInOriginal}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Sub EndupdateAssetFieldValues(ByVal asyncResult As System.IAsyncResult)
        Me.EndInvoke(asyncResult)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub updateAssetFieldValuesAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal assets As assetQuery, ByVal changes() As fieldValuesChange, ByVal embedChangesInOriginal As Boolean)
        Me.updateAssetFieldValuesAsync(sessionId, catalogId, assets, changes, embedChangesInOriginal, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub updateAssetFieldValuesAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal assets As assetQuery, ByVal changes() As fieldValuesChange, ByVal embedChangesInOriginal As Boolean, ByVal userState As Object)
        If (Me.updateAssetFieldValuesOperationCompleted Is Nothing) Then
            Me.updateAssetFieldValuesOperationCompleted = AddressOf Me.OnupdateAssetFieldValuesOperationCompleted
        End If
        Me.InvokeAsync("updateAssetFieldValues", New Object() {sessionId, catalogId, assets, changes, embedChangesInOriginal}, Me.updateAssetFieldValuesOperationCompleted, userState)
    End Sub
    
    Private Sub OnupdateAssetFieldValuesOperationCompleted(ByVal arg As Object)
        If (Not (Me.updateAssetFieldValuesCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent updateAssetFieldValuesCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Sub updateGallery(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal gallery As gallery)
        Me.Invoke("updateGallery", New Object() {sessionId, catalogId, gallery})
    End Sub
    
    '''<remarks/>
    Public Function BeginupdateGallery(ByVal sessionId As String, ByVal catalogId As String, ByVal gallery As gallery, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("updateGallery", New Object() {sessionId, catalogId, gallery}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Sub EndupdateGallery(ByVal asyncResult As System.IAsyncResult)
        Me.EndInvoke(asyncResult)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub updateGalleryAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal gallery As gallery)
        Me.updateGalleryAsync(sessionId, catalogId, gallery, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub updateGalleryAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal gallery As gallery, ByVal userState As Object)
        If (Me.updateGalleryOperationCompleted Is Nothing) Then
            Me.updateGalleryOperationCompleted = AddressOf Me.OnupdateGalleryOperationCompleted
        End If
        Me.InvokeAsync("updateGallery", New Object() {sessionId, catalogId, gallery}, Me.updateGalleryOperationCompleted, userState)
    End Sub
    
    Private Sub OnupdateGalleryOperationCompleted(ByVal arg As Object)
        If (Not (Me.updateGalleryCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent updateGalleryCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function createTaskPreset(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal task As task) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> task
        Dim results() As Object = Me.Invoke("createTaskPreset", New Object() {sessionId, task})
        Return CType(results(0),task)
    End Function
    
    '''<remarks/>
    Public Function BegincreateTaskPreset(ByVal sessionId As String, ByVal task As task, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("createTaskPreset", New Object() {sessionId, task}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndcreateTaskPreset(ByVal asyncResult As System.IAsyncResult) As task
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),task)
    End Function
    
    '''<remarks/>
    Public Overloads Sub createTaskPresetAsync(ByVal sessionId As String, ByVal task As task)
        Me.createTaskPresetAsync(sessionId, task, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub createTaskPresetAsync(ByVal sessionId As String, ByVal task As task, ByVal userState As Object)
        If (Me.createTaskPresetOperationCompleted Is Nothing) Then
            Me.createTaskPresetOperationCompleted = AddressOf Me.OncreateTaskPresetOperationCompleted
        End If
        Me.InvokeAsync("createTaskPreset", New Object() {sessionId, task}, Me.createTaskPresetOperationCompleted, userState)
    End Sub
    
    Private Sub OncreateTaskPresetOperationCompleted(ByVal arg As Object)
        If (Not (Me.createTaskPresetCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent createTaskPresetCompleted(Me, New createTaskPresetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function listTaskSettings() As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> System.Nullable(Of taskSetting)()
        Dim results() As Object = Me.Invoke("listTaskSettings", New Object(-1) {})
        Return CType(results(0),System.Nullable(Of taskSetting)())
    End Function
    
    '''<remarks/>
    Public Function BeginlistTaskSettings(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("listTaskSettings", New Object(-1) {}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndlistTaskSettings(ByVal asyncResult As System.IAsyncResult) As System.Nullable(Of taskSetting)()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),System.Nullable(Of taskSetting)())
    End Function
    
    '''<remarks/>
    Public Overloads Sub listTaskSettingsAsync()
        Me.listTaskSettingsAsync(Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub listTaskSettingsAsync(ByVal userState As Object)
        If (Me.listTaskSettingsOperationCompleted Is Nothing) Then
            Me.listTaskSettingsOperationCompleted = AddressOf Me.OnlistTaskSettingsOperationCompleted
        End If
        Me.InvokeAsync("listTaskSettings", New Object(-1) {}, Me.listTaskSettingsOperationCompleted, userState)
    End Sub
    
    Private Sub OnlistTaskSettingsOperationCompleted(ByVal arg As Object)
        If (Not (Me.listTaskSettingsCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent listTaskSettingsCompleted(Me, New listTaskSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function listColorMode() As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> System.Nullable(Of colorMode)()
        Dim results() As Object = Me.Invoke("listColorMode", New Object(-1) {})
        Return CType(results(0),System.Nullable(Of colorMode)())
    End Function
    
    '''<remarks/>
    Public Function BeginlistColorMode(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("listColorMode", New Object(-1) {}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndlistColorMode(ByVal asyncResult As System.IAsyncResult) As System.Nullable(Of colorMode)()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),System.Nullable(Of colorMode)())
    End Function
    
    '''<remarks/>
    Public Overloads Sub listColorModeAsync()
        Me.listColorModeAsync(Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub listColorModeAsync(ByVal userState As Object)
        If (Me.listColorModeOperationCompleted Is Nothing) Then
            Me.listColorModeOperationCompleted = AddressOf Me.OnlistColorModeOperationCompleted
        End If
        Me.InvokeAsync("listColorMode", New Object(-1) {}, Me.listColorModeOperationCompleted, userState)
    End Sub
    
    Private Sub OnlistColorModeOperationCompleted(ByVal arg As Object)
        If (Not (Me.listColorModeCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent listColorModeCompleted(Me, New listColorModeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function listOutputFileFormat() As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> System.Nullable(Of outputFileFormat)()
        Dim results() As Object = Me.Invoke("listOutputFileFormat", New Object(-1) {})
        Return CType(results(0),System.Nullable(Of outputFileFormat)())
    End Function
    
    '''<remarks/>
    Public Function BeginlistOutputFileFormat(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("listOutputFileFormat", New Object(-1) {}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndlistOutputFileFormat(ByVal asyncResult As System.IAsyncResult) As System.Nullable(Of outputFileFormat)()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),System.Nullable(Of outputFileFormat)())
    End Function
    
    '''<remarks/>
    Public Overloads Sub listOutputFileFormatAsync()
        Me.listOutputFileFormatAsync(Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub listOutputFileFormatAsync(ByVal userState As Object)
        If (Me.listOutputFileFormatOperationCompleted Is Nothing) Then
            Me.listOutputFileFormatOperationCompleted = AddressOf Me.OnlistOutputFileFormatOperationCompleted
        End If
        Me.InvokeAsync("listOutputFileFormat", New Object(-1) {}, Me.listOutputFileFormatOperationCompleted, userState)
    End Sub
    
    Private Sub OnlistOutputFileFormatOperationCompleted(ByVal arg As Object)
        If (Not (Me.listOutputFileFormatCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent listOutputFileFormatCompleted(Me, New listOutputFileFormatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function listOutputDestination() As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> System.Nullable(Of outputDestination)()
        Dim results() As Object = Me.Invoke("listOutputDestination", New Object(-1) {})
        Return CType(results(0),System.Nullable(Of outputDestination)())
    End Function
    
    '''<remarks/>
    Public Function BeginlistOutputDestination(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("listOutputDestination", New Object(-1) {}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndlistOutputDestination(ByVal asyncResult As System.IAsyncResult) As System.Nullable(Of outputDestination)()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),System.Nullable(Of outputDestination)())
    End Function
    
    '''<remarks/>
    Public Overloads Sub listOutputDestinationAsync()
        Me.listOutputDestinationAsync(Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub listOutputDestinationAsync(ByVal userState As Object)
        If (Me.listOutputDestinationOperationCompleted Is Nothing) Then
            Me.listOutputDestinationOperationCompleted = AddressOf Me.OnlistOutputDestinationOperationCompleted
        End If
        Me.InvokeAsync("listOutputDestination", New Object(-1) {}, Me.listOutputDestinationOperationCompleted, userState)
    End Sub
    
    Private Sub OnlistOutputDestinationOperationCompleted(ByVal arg As Object)
        If (Not (Me.listOutputDestinationCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent listOutputDestinationCompleted(Me, New listOutputDestinationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function listRenameType() As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> System.Nullable(Of renameType)()
        Dim results() As Object = Me.Invoke("listRenameType", New Object(-1) {})
        Return CType(results(0),System.Nullable(Of renameType)())
    End Function
    
    '''<remarks/>
    Public Function BeginlistRenameType(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("listRenameType", New Object(-1) {}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndlistRenameType(ByVal asyncResult As System.IAsyncResult) As System.Nullable(Of renameType)()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),System.Nullable(Of renameType)())
    End Function
    
    '''<remarks/>
    Public Overloads Sub listRenameTypeAsync()
        Me.listRenameTypeAsync(Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub listRenameTypeAsync(ByVal userState As Object)
        If (Me.listRenameTypeOperationCompleted Is Nothing) Then
            Me.listRenameTypeOperationCompleted = AddressOf Me.OnlistRenameTypeOperationCompleted
        End If
        Me.InvokeAsync("listRenameType", New Object(-1) {}, Me.listRenameTypeOperationCompleted, userState)
    End Sub
    
    Private Sub OnlistRenameTypeOperationCompleted(ByVal arg As Object)
        If (Not (Me.listRenameTypeCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent listRenameTypeCompleted(Me, New listRenameTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function listDNGEmbedRawFile() As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> System.Nullable(Of dngEmbedRawFile)()
        Dim results() As Object = Me.Invoke("listDNGEmbedRawFile", New Object(-1) {})
        Return CType(results(0),System.Nullable(Of dngEmbedRawFile)())
    End Function
    
    '''<remarks/>
    Public Function BeginlistDNGEmbedRawFile(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("listDNGEmbedRawFile", New Object(-1) {}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndlistDNGEmbedRawFile(ByVal asyncResult As System.IAsyncResult) As System.Nullable(Of dngEmbedRawFile)()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),System.Nullable(Of dngEmbedRawFile)())
    End Function
    
    '''<remarks/>
    Public Overloads Sub listDNGEmbedRawFileAsync()
        Me.listDNGEmbedRawFileAsync(Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub listDNGEmbedRawFileAsync(ByVal userState As Object)
        If (Me.listDNGEmbedRawFileOperationCompleted Is Nothing) Then
            Me.listDNGEmbedRawFileOperationCompleted = AddressOf Me.OnlistDNGEmbedRawFileOperationCompleted
        End If
        Me.InvokeAsync("listDNGEmbedRawFile", New Object(-1) {}, Me.listDNGEmbedRawFileOperationCompleted, userState)
    End Sub
    
    Private Sub OnlistDNGEmbedRawFileOperationCompleted(ByVal arg As Object)
        If (Not (Me.listDNGEmbedRawFileCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent listDNGEmbedRawFileCompleted(Me, New listDNGEmbedRawFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function listWatermarkType() As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> System.Nullable(Of watermarkType)()
        Dim results() As Object = Me.Invoke("listWatermarkType", New Object(-1) {})
        Return CType(results(0),System.Nullable(Of watermarkType)())
    End Function
    
    '''<remarks/>
    Public Function BeginlistWatermarkType(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("listWatermarkType", New Object(-1) {}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndlistWatermarkType(ByVal asyncResult As System.IAsyncResult) As System.Nullable(Of watermarkType)()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),System.Nullable(Of watermarkType)())
    End Function
    
    '''<remarks/>
    Public Overloads Sub listWatermarkTypeAsync()
        Me.listWatermarkTypeAsync(Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub listWatermarkTypeAsync(ByVal userState As Object)
        If (Me.listWatermarkTypeOperationCompleted Is Nothing) Then
            Me.listWatermarkTypeOperationCompleted = AddressOf Me.OnlistWatermarkTypeOperationCompleted
        End If
        Me.InvokeAsync("listWatermarkType", New Object(-1) {}, Me.listWatermarkTypeOperationCompleted, userState)
    End Sub
    
    Private Sub OnlistWatermarkTypeOperationCompleted(ByVal arg As Object)
        If (Not (Me.listWatermarkTypeCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent listWatermarkTypeCompleted(Me, New listWatermarkTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function listWatermarkPosition() As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> System.Nullable(Of watermarkPosition)()
        Dim results() As Object = Me.Invoke("listWatermarkPosition", New Object(-1) {})
        Return CType(results(0),System.Nullable(Of watermarkPosition)())
    End Function
    
    '''<remarks/>
    Public Function BeginlistWatermarkPosition(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("listWatermarkPosition", New Object(-1) {}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndlistWatermarkPosition(ByVal asyncResult As System.IAsyncResult) As System.Nullable(Of watermarkPosition)()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),System.Nullable(Of watermarkPosition)())
    End Function
    
    '''<remarks/>
    Public Overloads Sub listWatermarkPositionAsync()
        Me.listWatermarkPositionAsync(Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub listWatermarkPositionAsync(ByVal userState As Object)
        If (Me.listWatermarkPositionOperationCompleted Is Nothing) Then
            Me.listWatermarkPositionOperationCompleted = AddressOf Me.OnlistWatermarkPositionOperationCompleted
        End If
        Me.InvokeAsync("listWatermarkPosition", New Object(-1) {}, Me.listWatermarkPositionOperationCompleted, userState)
    End Sub
    
    Private Sub OnlistWatermarkPositionOperationCompleted(ByVal arg As Object)
        If (Not (Me.listWatermarkPositionCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent listWatermarkPositionCompleted(Me, New listWatermarkPositionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function listAddToCatalog() As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> System.Nullable(Of addToCatalog)()
        Dim results() As Object = Me.Invoke("listAddToCatalog", New Object(-1) {})
        Return CType(results(0),System.Nullable(Of addToCatalog)())
    End Function
    
    '''<remarks/>
    Public Function BeginlistAddToCatalog(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("listAddToCatalog", New Object(-1) {}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndlistAddToCatalog(ByVal asyncResult As System.IAsyncResult) As System.Nullable(Of addToCatalog)()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),System.Nullable(Of addToCatalog)())
    End Function
    
    '''<remarks/>
    Public Overloads Sub listAddToCatalogAsync()
        Me.listAddToCatalogAsync(Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub listAddToCatalogAsync(ByVal userState As Object)
        If (Me.listAddToCatalogOperationCompleted Is Nothing) Then
            Me.listAddToCatalogOperationCompleted = AddressOf Me.OnlistAddToCatalogOperationCompleted
        End If
        Me.InvokeAsync("listAddToCatalog", New Object(-1) {}, Me.listAddToCatalogOperationCompleted, userState)
    End Sub
    
    Private Sub OnlistAddToCatalogOperationCompleted(ByVal arg As Object)
        If (Not (Me.listAddToCatalogCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent listAddToCatalogCompleted(Me, New listAddToCatalogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function listCompressionType() As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> System.Nullable(Of compressionType)()
        Dim results() As Object = Me.Invoke("listCompressionType", New Object(-1) {})
        Return CType(results(0),System.Nullable(Of compressionType)())
    End Function
    
    '''<remarks/>
    Public Function BeginlistCompressionType(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("listCompressionType", New Object(-1) {}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndlistCompressionType(ByVal asyncResult As System.IAsyncResult) As System.Nullable(Of compressionType)()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),System.Nullable(Of compressionType)())
    End Function
    
    '''<remarks/>
    Public Overloads Sub listCompressionTypeAsync()
        Me.listCompressionTypeAsync(Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub listCompressionTypeAsync(ByVal userState As Object)
        If (Me.listCompressionTypeOperationCompleted Is Nothing) Then
            Me.listCompressionTypeOperationCompleted = AddressOf Me.OnlistCompressionTypeOperationCompleted
        End If
        Me.InvokeAsync("listCompressionType", New Object(-1) {}, Me.listCompressionTypeOperationCompleted, userState)
    End Sub
    
    Private Sub OnlistCompressionTypeOperationCompleted(ByVal arg As Object)
        If (Not (Me.listCompressionTypeCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent listCompressionTypeCompleted(Me, New listCompressionTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function listDngCameraRawVersion() As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> System.Nullable(Of dngCameraRawVersion)()
        Dim results() As Object = Me.Invoke("listDngCameraRawVersion", New Object(-1) {})
        Return CType(results(0),System.Nullable(Of dngCameraRawVersion)())
    End Function
    
    '''<remarks/>
    Public Function BeginlistDngCameraRawVersion(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("listDngCameraRawVersion", New Object(-1) {}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndlistDngCameraRawVersion(ByVal asyncResult As System.IAsyncResult) As System.Nullable(Of dngCameraRawVersion)()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),System.Nullable(Of dngCameraRawVersion)())
    End Function
    
    '''<remarks/>
    Public Overloads Sub listDngCameraRawVersionAsync()
        Me.listDngCameraRawVersionAsync(Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub listDngCameraRawVersionAsync(ByVal userState As Object)
        If (Me.listDngCameraRawVersionOperationCompleted Is Nothing) Then
            Me.listDngCameraRawVersionOperationCompleted = AddressOf Me.OnlistDngCameraRawVersionOperationCompleted
        End If
        Me.InvokeAsync("listDngCameraRawVersion", New Object(-1) {}, Me.listDngCameraRawVersionOperationCompleted, userState)
    End Sub
    
    Private Sub OnlistDngCameraRawVersionOperationCompleted(ByVal arg As Object)
        If (Not (Me.listDngCameraRawVersionCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent listDngCameraRawVersionCompleted(Me, New listDngCameraRawVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function listDngJpegPreviewType() As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> System.Nullable(Of dngJpegPreviewType)()
        Dim results() As Object = Me.Invoke("listDngJpegPreviewType", New Object(-1) {})
        Return CType(results(0),System.Nullable(Of dngJpegPreviewType)())
    End Function
    
    '''<remarks/>
    Public Function BeginlistDngJpegPreviewType(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("listDngJpegPreviewType", New Object(-1) {}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndlistDngJpegPreviewType(ByVal asyncResult As System.IAsyncResult) As System.Nullable(Of dngJpegPreviewType)()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),System.Nullable(Of dngJpegPreviewType)())
    End Function
    
    '''<remarks/>
    Public Overloads Sub listDngJpegPreviewTypeAsync()
        Me.listDngJpegPreviewTypeAsync(Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub listDngJpegPreviewTypeAsync(ByVal userState As Object)
        If (Me.listDngJpegPreviewTypeOperationCompleted Is Nothing) Then
            Me.listDngJpegPreviewTypeOperationCompleted = AddressOf Me.OnlistDngJpegPreviewTypeOperationCompleted
        End If
        Me.InvokeAsync("listDngJpegPreviewType", New Object(-1) {}, Me.listDngJpegPreviewTypeOperationCompleted, userState)
    End Sub
    
    Private Sub OnlistDngJpegPreviewTypeOperationCompleted(ByVal arg As Object)
        If (Not (Me.listDngJpegPreviewTypeCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent listDngJpegPreviewTypeCompleted(Me, New listDngJpegPreviewTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function listResizeType() As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> System.Nullable(Of resizeType)()
        Dim results() As Object = Me.Invoke("listResizeType", New Object(-1) {})
        Return CType(results(0),System.Nullable(Of resizeType)())
    End Function
    
    '''<remarks/>
    Public Function BeginlistResizeType(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("listResizeType", New Object(-1) {}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndlistResizeType(ByVal asyncResult As System.IAsyncResult) As System.Nullable(Of resizeType)()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),System.Nullable(Of resizeType)())
    End Function
    
    '''<remarks/>
    Public Overloads Sub listResizeTypeAsync()
        Me.listResizeTypeAsync(Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub listResizeTypeAsync(ByVal userState As Object)
        If (Me.listResizeTypeOperationCompleted Is Nothing) Then
            Me.listResizeTypeOperationCompleted = AddressOf Me.OnlistResizeTypeOperationCompleted
        End If
        Me.InvokeAsync("listResizeType", New Object(-1) {}, Me.listResizeTypeOperationCompleted, userState)
    End Sub
    
    Private Sub OnlistResizeTypeOperationCompleted(ByVal arg As Object)
        If (Not (Me.listResizeTypeCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent listResizeTypeCompleted(Me, New listResizeTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function listUnit() As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> System.Nullable(Of unit)()
        Dim results() As Object = Me.Invoke("listUnit", New Object(-1) {})
        Return CType(results(0),System.Nullable(Of unit)())
    End Function
    
    '''<remarks/>
    Public Function BeginlistUnit(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("listUnit", New Object(-1) {}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndlistUnit(ByVal asyncResult As System.IAsyncResult) As System.Nullable(Of unit)()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),System.Nullable(Of unit)())
    End Function
    
    '''<remarks/>
    Public Overloads Sub listUnitAsync()
        Me.listUnitAsync(Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub listUnitAsync(ByVal userState As Object)
        If (Me.listUnitOperationCompleted Is Nothing) Then
            Me.listUnitOperationCompleted = AddressOf Me.OnlistUnitOperationCompleted
        End If
        Me.InvokeAsync("listUnit", New Object(-1) {}, Me.listUnitOperationCompleted, userState)
    End Sub
    
    Private Sub OnlistUnitOperationCompleted(ByVal arg As Object)
        If (Not (Me.listUnitCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent listUnitCompleted(Me, New listUnitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Sub deleteTask(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal task As task)
        Me.Invoke("deleteTask", New Object() {sessionId, task})
    End Sub
    
    '''<remarks/>
    Public Function BegindeleteTask(ByVal sessionId As String, ByVal task As task, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("deleteTask", New Object() {sessionId, task}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Sub EnddeleteTask(ByVal asyncResult As System.IAsyncResult)
        Me.EndInvoke(asyncResult)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub deleteTaskAsync(ByVal sessionId As String, ByVal task As task)
        Me.deleteTaskAsync(sessionId, task, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub deleteTaskAsync(ByVal sessionId As String, ByVal task As task, ByVal userState As Object)
        If (Me.deleteTaskOperationCompleted Is Nothing) Then
            Me.deleteTaskOperationCompleted = AddressOf Me.OndeleteTaskOperationCompleted
        End If
        Me.InvokeAsync("deleteTask", New Object() {sessionId, task}, Me.deleteTaskOperationCompleted, userState)
    End Sub
    
    Private Sub OndeleteTaskOperationCompleted(ByVal arg As Object)
        If (Not (Me.deleteTaskCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent deleteTaskCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function getAssetsWithBatchOfValues(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal restrictionQuery As assetQuery, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal matchingValuesQuery As assetQuery, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal resultOptions As assetQueryResultOptions) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> assetQueryResults
        Dim results() As Object = Me.Invoke("getAssetsWithBatchOfValues", New Object() {sessionId, catalogId, restrictionQuery, matchingValuesQuery, resultOptions})
        Return CType(results(0),assetQueryResults)
    End Function
    
    '''<remarks/>
    Public Function BegingetAssetsWithBatchOfValues(ByVal sessionId As String, ByVal catalogId As String, ByVal restrictionQuery As assetQuery, ByVal matchingValuesQuery As assetQuery, ByVal resultOptions As assetQueryResultOptions, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("getAssetsWithBatchOfValues", New Object() {sessionId, catalogId, restrictionQuery, matchingValuesQuery, resultOptions}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndgetAssetsWithBatchOfValues(ByVal asyncResult As System.IAsyncResult) As assetQueryResults
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),assetQueryResults)
    End Function
    
    '''<remarks/>
    Public Overloads Sub getAssetsWithBatchOfValuesAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal restrictionQuery As assetQuery, ByVal matchingValuesQuery As assetQuery, ByVal resultOptions As assetQueryResultOptions)
        Me.getAssetsWithBatchOfValuesAsync(sessionId, catalogId, restrictionQuery, matchingValuesQuery, resultOptions, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub getAssetsWithBatchOfValuesAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal restrictionQuery As assetQuery, ByVal matchingValuesQuery As assetQuery, ByVal resultOptions As assetQueryResultOptions, ByVal userState As Object)
        If (Me.getAssetsWithBatchOfValuesOperationCompleted Is Nothing) Then
            Me.getAssetsWithBatchOfValuesOperationCompleted = AddressOf Me.OngetAssetsWithBatchOfValuesOperationCompleted
        End If
        Me.InvokeAsync("getAssetsWithBatchOfValues", New Object() {sessionId, catalogId, restrictionQuery, matchingValuesQuery, resultOptions}, Me.getAssetsWithBatchOfValuesOperationCompleted, userState)
    End Sub
    
    Private Sub OngetAssetsWithBatchOfValuesOperationCompleted(ByVal arg As Object)
        If (Not (Me.getAssetsWithBatchOfValuesCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent getAssetsWithBatchOfValuesCompleted(Me, New getAssetsWithBatchOfValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function getCatalogChangeStatus(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> catalogChangeStatus()
        Dim results() As Object = Me.Invoke("getCatalogChangeStatus", New Object() {sessionId})
        Return CType(results(0),catalogChangeStatus())
    End Function
    
    '''<remarks/>
    Public Function BegingetCatalogChangeStatus(ByVal sessionId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("getCatalogChangeStatus", New Object() {sessionId}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndgetCatalogChangeStatus(ByVal asyncResult As System.IAsyncResult) As catalogChangeStatus()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),catalogChangeStatus())
    End Function
    
    '''<remarks/>
    Public Overloads Sub getCatalogChangeStatusAsync(ByVal sessionId As String)
        Me.getCatalogChangeStatusAsync(sessionId, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub getCatalogChangeStatusAsync(ByVal sessionId As String, ByVal userState As Object)
        If (Me.getCatalogChangeStatusOperationCompleted Is Nothing) Then
            Me.getCatalogChangeStatusOperationCompleted = AddressOf Me.OngetCatalogChangeStatusOperationCompleted
        End If
        Me.InvokeAsync("getCatalogChangeStatus", New Object() {sessionId}, Me.getCatalogChangeStatusOperationCompleted, userState)
    End Sub
    
    Private Sub OngetCatalogChangeStatusOperationCompleted(ByVal arg As Object)
        If (Not (Me.getCatalogChangeStatusCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent getCatalogChangeStatusCompleted(Me, New getCatalogChangeStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function getDefaultViewSettings(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> String
        Dim results() As Object = Me.Invoke("getDefaultViewSettings", New Object() {sessionId, catalogId})
        Return CType(results(0),String)
    End Function
    
    '''<remarks/>
    Public Function BegingetDefaultViewSettings(ByVal sessionId As String, ByVal catalogId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("getDefaultViewSettings", New Object() {sessionId, catalogId}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndgetDefaultViewSettings(ByVal asyncResult As System.IAsyncResult) As String
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),String)
    End Function
    
    '''<remarks/>
    Public Overloads Sub getDefaultViewSettingsAsync(ByVal sessionId As String, ByVal catalogId As String)
        Me.getDefaultViewSettingsAsync(sessionId, catalogId, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub getDefaultViewSettingsAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal userState As Object)
        If (Me.getDefaultViewSettingsOperationCompleted Is Nothing) Then
            Me.getDefaultViewSettingsOperationCompleted = AddressOf Me.OngetDefaultViewSettingsOperationCompleted
        End If
        Me.InvokeAsync("getDefaultViewSettings", New Object() {sessionId, catalogId}, Me.getDefaultViewSettingsOperationCompleted, userState)
    End Sub
    
    Private Sub OngetDefaultViewSettingsOperationCompleted(ByVal arg As Object)
        If (Not (Me.getDefaultViewSettingsCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent getDefaultViewSettingsCompleted(Me, New getDefaultViewSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function getExclusionInfoForCatalog(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> exclusionInfo
        Dim results() As Object = Me.Invoke("getExclusionInfoForCatalog", New Object() {sessionId, catalogId})
        Return CType(results(0),exclusionInfo)
    End Function
    
    '''<remarks/>
    Public Function BegingetExclusionInfoForCatalog(ByVal sessionId As String, ByVal catalogId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("getExclusionInfoForCatalog", New Object() {sessionId, catalogId}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndgetExclusionInfoForCatalog(ByVal asyncResult As System.IAsyncResult) As exclusionInfo
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),exclusionInfo)
    End Function
    
    '''<remarks/>
    Public Overloads Sub getExclusionInfoForCatalogAsync(ByVal sessionId As String, ByVal catalogId As String)
        Me.getExclusionInfoForCatalogAsync(sessionId, catalogId, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub getExclusionInfoForCatalogAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal userState As Object)
        If (Me.getExclusionInfoForCatalogOperationCompleted Is Nothing) Then
            Me.getExclusionInfoForCatalogOperationCompleted = AddressOf Me.OngetExclusionInfoForCatalogOperationCompleted
        End If
        Me.InvokeAsync("getExclusionInfoForCatalog", New Object() {sessionId, catalogId}, Me.getExclusionInfoForCatalogOperationCompleted, userState)
    End Sub
    
    Private Sub OngetExclusionInfoForCatalogOperationCompleted(ByVal arg As Object)
        If (Not (Me.getExclusionInfoForCatalogCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent getExclusionInfoForCatalogCompleted(Me, New getExclusionInfoForCatalogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function getTaskPresets(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal taskType As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> task()
        Dim results() As Object = Me.Invoke("getTaskPresets", New Object() {sessionId, catalogId, taskType})
        Return CType(results(0),task())
    End Function
    
    '''<remarks/>
    Public Function BegingetTaskPresets(ByVal sessionId As String, ByVal catalogId As String, ByVal taskType As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("getTaskPresets", New Object() {sessionId, catalogId, taskType}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndgetTaskPresets(ByVal asyncResult As System.IAsyncResult) As task()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),task())
    End Function
    
    '''<remarks/>
    Public Overloads Sub getTaskPresetsAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal taskType As String)
        Me.getTaskPresetsAsync(sessionId, catalogId, taskType, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub getTaskPresetsAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal taskType As String, ByVal userState As Object)
        If (Me.getTaskPresetsOperationCompleted Is Nothing) Then
            Me.getTaskPresetsOperationCompleted = AddressOf Me.OngetTaskPresetsOperationCompleted
        End If
        Me.InvokeAsync("getTaskPresets", New Object() {sessionId, catalogId, taskType}, Me.getTaskPresetsOperationCompleted, userState)
    End Sub
    
    Private Sub OngetTaskPresetsOperationCompleted(ByVal arg As Object)
        If (Not (Me.getTaskPresetsCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent getTaskPresetsCompleted(Me, New getTaskPresetsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function getUnmatchedFieldValuesFromBatchFind(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal queryCacheId As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> String()
        Dim results() As Object = Me.Invoke("getUnmatchedFieldValuesFromBatchFind", New Object() {sessionId, queryCacheId})
        Return CType(results(0),String())
    End Function
    
    '''<remarks/>
    Public Function BegingetUnmatchedFieldValuesFromBatchFind(ByVal sessionId As String, ByVal queryCacheId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("getUnmatchedFieldValuesFromBatchFind", New Object() {sessionId, queryCacheId}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndgetUnmatchedFieldValuesFromBatchFind(ByVal asyncResult As System.IAsyncResult) As String()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),String())
    End Function
    
    '''<remarks/>
    Public Overloads Sub getUnmatchedFieldValuesFromBatchFindAsync(ByVal sessionId As String, ByVal queryCacheId As String)
        Me.getUnmatchedFieldValuesFromBatchFindAsync(sessionId, queryCacheId, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub getUnmatchedFieldValuesFromBatchFindAsync(ByVal sessionId As String, ByVal queryCacheId As String, ByVal userState As Object)
        If (Me.getUnmatchedFieldValuesFromBatchFindOperationCompleted Is Nothing) Then
            Me.getUnmatchedFieldValuesFromBatchFindOperationCompleted = AddressOf Me.OngetUnmatchedFieldValuesFromBatchFindOperationCompleted
        End If
        Me.InvokeAsync("getUnmatchedFieldValuesFromBatchFind", New Object() {sessionId, queryCacheId}, Me.getUnmatchedFieldValuesFromBatchFindOperationCompleted, userState)
    End Sub
    
    Private Sub OngetUnmatchedFieldValuesFromBatchFindOperationCompleted(ByVal arg As Object)
        If (Not (Me.getUnmatchedFieldValuesFromBatchFindCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent getUnmatchedFieldValuesFromBatchFindCompleted(Me, New getUnmatchedFieldValuesFromBatchFindCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function getUserPreferences(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> String
        Dim results() As Object = Me.Invoke("getUserPreferences", New Object() {sessionId})
        Return CType(results(0),String)
    End Function
    
    '''<remarks/>
    Public Function BegingetUserPreferences(ByVal sessionId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("getUserPreferences", New Object() {sessionId}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndgetUserPreferences(ByVal asyncResult As System.IAsyncResult) As String
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),String)
    End Function
    
    '''<remarks/>
    Public Overloads Sub getUserPreferencesAsync(ByVal sessionId As String)
        Me.getUserPreferencesAsync(sessionId, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub getUserPreferencesAsync(ByVal sessionId As String, ByVal userState As Object)
        If (Me.getUserPreferencesOperationCompleted Is Nothing) Then
            Me.getUserPreferencesOperationCompleted = AddressOf Me.OngetUserPreferencesOperationCompleted
        End If
        Me.InvokeAsync("getUserPreferences", New Object() {sessionId}, Me.getUserPreferencesOperationCompleted, userState)
    End Sub
    
    Private Sub OngetUserPreferencesOperationCompleted(ByVal arg As Object)
        If (Not (Me.getUserPreferencesCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent getUserPreferencesCompleted(Me, New getUserPreferencesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function getUserViewSettings(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> String
        Dim results() As Object = Me.Invoke("getUserViewSettings", New Object() {sessionId, catalogId})
        Return CType(results(0),String)
    End Function
    
    '''<remarks/>
    Public Function BegingetUserViewSettings(ByVal sessionId As String, ByVal catalogId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("getUserViewSettings", New Object() {sessionId, catalogId}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndgetUserViewSettings(ByVal asyncResult As System.IAsyncResult) As String
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),String)
    End Function
    
    '''<remarks/>
    Public Overloads Sub getUserViewSettingsAsync(ByVal sessionId As String, ByVal catalogId As String)
        Me.getUserViewSettingsAsync(sessionId, catalogId, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub getUserViewSettingsAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal userState As Object)
        If (Me.getUserViewSettingsOperationCompleted Is Nothing) Then
            Me.getUserViewSettingsOperationCompleted = AddressOf Me.OngetUserViewSettingsOperationCompleted
        End If
        Me.InvokeAsync("getUserViewSettings", New Object() {sessionId, catalogId}, Me.getUserViewSettingsOperationCompleted, userState)
    End Sub
    
    Private Sub OngetUserViewSettingsOperationCompleted(ByVal arg As Object)
        If (Not (Me.getUserViewSettingsCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent getUserViewSettingsCompleted(Me, New getUserViewSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Sub primeAssetPreviews(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute("rids", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> ByVal rids() As System.Nullable(Of Long))
        Me.Invoke("primeAssetPreviews", New Object() {sessionId, catalogId, rids})
    End Sub
    
    '''<remarks/>
    Public Function BeginprimeAssetPreviews(ByVal sessionId As String, ByVal catalogId As String, ByVal rids() As System.Nullable(Of Long), ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("primeAssetPreviews", New Object() {sessionId, catalogId, rids}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Sub EndprimeAssetPreviews(ByVal asyncResult As System.IAsyncResult)
        Me.EndInvoke(asyncResult)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub primeAssetPreviewsAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal rids() As System.Nullable(Of Long))
        Me.primeAssetPreviewsAsync(sessionId, catalogId, rids, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub primeAssetPreviewsAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal rids() As System.Nullable(Of Long), ByVal userState As Object)
        If (Me.primeAssetPreviewsOperationCompleted Is Nothing) Then
            Me.primeAssetPreviewsOperationCompleted = AddressOf Me.OnprimeAssetPreviewsOperationCompleted
        End If
        Me.InvokeAsync("primeAssetPreviews", New Object() {sessionId, catalogId, rids}, Me.primeAssetPreviewsOperationCompleted, userState)
    End Sub
    
    Private Sub OnprimeAssetPreviewsOperationCompleted(ByVal arg As Object)
        If (Not (Me.primeAssetPreviewsCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent primeAssetPreviewsCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Sub setDefaultViewSettings(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal settings As String)
        Me.Invoke("setDefaultViewSettings", New Object() {sessionId, catalogId, settings})
    End Sub
    
    '''<remarks/>
    Public Function BeginsetDefaultViewSettings(ByVal sessionId As String, ByVal catalogId As String, ByVal settings As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("setDefaultViewSettings", New Object() {sessionId, catalogId, settings}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Sub EndsetDefaultViewSettings(ByVal asyncResult As System.IAsyncResult)
        Me.EndInvoke(asyncResult)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub setDefaultViewSettingsAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal settings As String)
        Me.setDefaultViewSettingsAsync(sessionId, catalogId, settings, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub setDefaultViewSettingsAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal settings As String, ByVal userState As Object)
        If (Me.setDefaultViewSettingsOperationCompleted Is Nothing) Then
            Me.setDefaultViewSettingsOperationCompleted = AddressOf Me.OnsetDefaultViewSettingsOperationCompleted
        End If
        Me.InvokeAsync("setDefaultViewSettings", New Object() {sessionId, catalogId, settings}, Me.setDefaultViewSettingsOperationCompleted, userState)
    End Sub
    
    Private Sub OnsetDefaultViewSettingsOperationCompleted(ByVal arg As Object)
        If (Not (Me.setDefaultViewSettingsCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent setDefaultViewSettingsCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Sub setSessionInactivityTimeout(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal timeoutInSeconds As Long)
        Me.Invoke("setSessionInactivityTimeout", New Object() {sessionId, timeoutInSeconds})
    End Sub
    
    '''<remarks/>
    Public Function BeginsetSessionInactivityTimeout(ByVal sessionId As String, ByVal timeoutInSeconds As Long, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("setSessionInactivityTimeout", New Object() {sessionId, timeoutInSeconds}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Sub EndsetSessionInactivityTimeout(ByVal asyncResult As System.IAsyncResult)
        Me.EndInvoke(asyncResult)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub setSessionInactivityTimeoutAsync(ByVal sessionId As String, ByVal timeoutInSeconds As Long)
        Me.setSessionInactivityTimeoutAsync(sessionId, timeoutInSeconds, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub setSessionInactivityTimeoutAsync(ByVal sessionId As String, ByVal timeoutInSeconds As Long, ByVal userState As Object)
        If (Me.setSessionInactivityTimeoutOperationCompleted Is Nothing) Then
            Me.setSessionInactivityTimeoutOperationCompleted = AddressOf Me.OnsetSessionInactivityTimeoutOperationCompleted
        End If
        Me.InvokeAsync("setSessionInactivityTimeout", New Object() {sessionId, timeoutInSeconds}, Me.setSessionInactivityTimeoutOperationCompleted, userState)
    End Sub
    
    Private Sub OnsetSessionInactivityTimeoutOperationCompleted(ByVal arg As Object)
        If (Not (Me.setSessionInactivityTimeoutCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent setSessionInactivityTimeoutCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Sub setUserPreferences(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal settings As String)
        Me.Invoke("setUserPreferences", New Object() {sessionId, settings})
    End Sub
    
    '''<remarks/>
    Public Function BeginsetUserPreferences(ByVal sessionId As String, ByVal settings As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("setUserPreferences", New Object() {sessionId, settings}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Sub EndsetUserPreferences(ByVal asyncResult As System.IAsyncResult)
        Me.EndInvoke(asyncResult)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub setUserPreferencesAsync(ByVal sessionId As String, ByVal settings As String)
        Me.setUserPreferencesAsync(sessionId, settings, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub setUserPreferencesAsync(ByVal sessionId As String, ByVal settings As String, ByVal userState As Object)
        If (Me.setUserPreferencesOperationCompleted Is Nothing) Then
            Me.setUserPreferencesOperationCompleted = AddressOf Me.OnsetUserPreferencesOperationCompleted
        End If
        Me.InvokeAsync("setUserPreferences", New Object() {sessionId, settings}, Me.setUserPreferencesOperationCompleted, userState)
    End Sub
    
    Private Sub OnsetUserPreferencesOperationCompleted(ByVal arg As Object)
        If (Not (Me.setUserPreferencesCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent setUserPreferencesCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Sub setUserViewSettings(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal settings As String)
        Me.Invoke("setUserViewSettings", New Object() {sessionId, catalogId, settings})
    End Sub
    
    '''<remarks/>
    Public Function BeginsetUserViewSettings(ByVal sessionId As String, ByVal catalogId As String, ByVal settings As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("setUserViewSettings", New Object() {sessionId, catalogId, settings}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Sub EndsetUserViewSettings(ByVal asyncResult As System.IAsyncResult)
        Me.EndInvoke(asyncResult)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub setUserViewSettingsAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal settings As String)
        Me.setUserViewSettingsAsync(sessionId, catalogId, settings, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub setUserViewSettingsAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal settings As String, ByVal userState As Object)
        If (Me.setUserViewSettingsOperationCompleted Is Nothing) Then
            Me.setUserViewSettingsOperationCompleted = AddressOf Me.OnsetUserViewSettingsOperationCompleted
        End If
        Me.InvokeAsync("setUserViewSettings", New Object() {sessionId, catalogId, settings}, Me.setUserViewSettingsOperationCompleted, userState)
    End Sub
    
    Private Sub OnsetUserViewSettingsOperationCompleted(ByVal arg As Object)
        If (Not (Me.setUserViewSettingsCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent setUserViewSettingsCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function updateTaskPreset(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal task As task) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> task
        Dim results() As Object = Me.Invoke("updateTaskPreset", New Object() {sessionId, task})
        Return CType(results(0),task)
    End Function
    
    '''<remarks/>
    Public Function BeginupdateTaskPreset(ByVal sessionId As String, ByVal task As task, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("updateTaskPreset", New Object() {sessionId, task}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndupdateTaskPreset(ByVal asyncResult As System.IAsyncResult) As task
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),task)
    End Function
    
    '''<remarks/>
    Public Overloads Sub updateTaskPresetAsync(ByVal sessionId As String, ByVal task As task)
        Me.updateTaskPresetAsync(sessionId, task, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub updateTaskPresetAsync(ByVal sessionId As String, ByVal task As task, ByVal userState As Object)
        If (Me.updateTaskPresetOperationCompleted Is Nothing) Then
            Me.updateTaskPresetOperationCompleted = AddressOf Me.OnupdateTaskPresetOperationCompleted
        End If
        Me.InvokeAsync("updateTaskPreset", New Object() {sessionId, task}, Me.updateTaskPresetOperationCompleted, userState)
    End Sub
    
    Private Sub OnupdateTaskPresetOperationCompleted(ByVal arg As Object)
        If (Not (Me.updateTaskPresetCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent updateTaskPresetCompleted(Me, New updateTaskPresetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function uploadFile(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal arg0 As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal arg1 As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal arg2 As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal arg3 As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType:="base64Binary", IsNullable:=true)> ByVal arg4() As Byte) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
        Dim results() As Object = Me.Invoke("uploadFile", New Object() {arg0, arg1, arg2, arg3, arg4})
        Return CType(results(0),Integer)
    End Function
    
    '''<remarks/>
    Public Function BeginuploadFile(ByVal arg0 As String, ByVal arg1 As String, ByVal arg2 As String, ByVal arg3 As String, ByVal arg4() As Byte, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("uploadFile", New Object() {arg0, arg1, arg2, arg3, arg4}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EnduploadFile(ByVal asyncResult As System.IAsyncResult) As Integer
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),Integer)
    End Function
    
    '''<remarks/>
    Public Overloads Sub uploadFileAsync(ByVal arg0 As String, ByVal arg1 As String, ByVal arg2 As String, ByVal arg3 As String, ByVal arg4() As Byte)
        Me.uploadFileAsync(arg0, arg1, arg2, arg3, arg4, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub uploadFileAsync(ByVal arg0 As String, ByVal arg1 As String, ByVal arg2 As String, ByVal arg3 As String, ByVal arg4() As Byte, ByVal userState As Object)
        If (Me.uploadFileOperationCompleted Is Nothing) Then
            Me.uploadFileOperationCompleted = AddressOf Me.OnuploadFileOperationCompleted
        End If
        Me.InvokeAsync("uploadFile", New Object() {arg0, arg1, arg2, arg3, arg4}, Me.uploadFileOperationCompleted, userState)
    End Sub
    
    Private Sub OnuploadFileOperationCompleted(ByVal arg As Object)
        If (Not (Me.uploadFileCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent uploadFileCompleted(Me, New uploadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function getVideoExtensions() As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> String()
        Dim results() As Object = Me.Invoke("getVideoExtensions", New Object(-1) {})
        Return CType(results(0),String())
    End Function
    
    '''<remarks/>
    Public Function BegingetVideoExtensions(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("getVideoExtensions", New Object(-1) {}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndgetVideoExtensions(ByVal asyncResult As System.IAsyncResult) As String()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),String())
    End Function
    
    '''<remarks/>
    Public Overloads Sub getVideoExtensionsAsync()
        Me.getVideoExtensionsAsync(Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub getVideoExtensionsAsync(ByVal userState As Object)
        If (Me.getVideoExtensionsOperationCompleted Is Nothing) Then
            Me.getVideoExtensionsOperationCompleted = AddressOf Me.OngetVideoExtensionsOperationCompleted
        End If
        Me.InvokeAsync("getVideoExtensions", New Object(-1) {}, Me.getVideoExtensionsOperationCompleted, userState)
    End Sub
    
    Private Sub OngetVideoExtensionsOperationCompleted(ByVal arg As Object)
        If (Not (Me.getVideoExtensionsCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent getVideoExtensionsCompleted(Me, New getVideoExtensionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function getAudioExtensions() As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> String()
        Dim results() As Object = Me.Invoke("getAudioExtensions", New Object(-1) {})
        Return CType(results(0),String())
    End Function
    
    '''<remarks/>
    Public Function BegingetAudioExtensions(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("getAudioExtensions", New Object(-1) {}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndgetAudioExtensions(ByVal asyncResult As System.IAsyncResult) As String()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),String())
    End Function
    
    '''<remarks/>
    Public Overloads Sub getAudioExtensionsAsync()
        Me.getAudioExtensionsAsync(Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub getAudioExtensionsAsync(ByVal userState As Object)
        If (Me.getAudioExtensionsOperationCompleted Is Nothing) Then
            Me.getAudioExtensionsOperationCompleted = AddressOf Me.OngetAudioExtensionsOperationCompleted
        End If
        Me.InvokeAsync("getAudioExtensions", New Object(-1) {}, Me.getAudioExtensionsOperationCompleted, userState)
    End Sub
    
    Private Sub OngetAudioExtensionsOperationCompleted(ByVal arg As Object)
        If (Not (Me.getAudioExtensionsCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent getAudioExtensionsCompleted(Me, New getAudioExtensionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://portfolio.extensis/service/asset", ResponseNamespace:="http://portfolio.extensis/service/asset", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function completion(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sessionId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal catalogId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal completionTerm As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> String()
        Dim results() As Object = Me.Invoke("completion", New Object() {sessionId, catalogId, completionTerm})
        Return CType(results(0),String())
    End Function
    
    '''<remarks/>
    Public Function Begincompletion(ByVal sessionId As String, ByVal catalogId As String, ByVal completionTerm As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("completion", New Object() {sessionId, catalogId, completionTerm}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function Endcompletion(ByVal asyncResult As System.IAsyncResult) As String()
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),String())
    End Function
    
    '''<remarks/>
    Public Overloads Sub completionAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal completionTerm As String)
        Me.completionAsync(sessionId, catalogId, completionTerm, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub completionAsync(ByVal sessionId As String, ByVal catalogId As String, ByVal completionTerm As String, ByVal userState As Object)
        If (Me.completionOperationCompleted Is Nothing) Then
            Me.completionOperationCompleted = AddressOf Me.OncompletionOperationCompleted
        End If
        Me.InvokeAsync("completion", New Object() {sessionId, catalogId, completionTerm}, Me.completionOperationCompleted, userState)
    End Sub
    
    Private Sub OncompletionOperationCompleted(ByVal arg As Object)
        If (Not (Me.completionCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent completionCompleted(Me, New completionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    Public Shadows Sub CancelAsync(ByVal userState As Object)
        MyBase.CancelAsync(userState)
    End Sub
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Partial Public Class assetQuery
    
    Private galleryIdField As String
    
    Private queryCacheIdField As String
    
    Private queryTermField As assetQueryTerm
    
    Private sortOptionsField As sortOptions
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
    Public Property galleryId() As String
        Get
            Return Me.galleryIdField
        End Get
        Set
            Me.galleryIdField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
    Public Property queryCacheId() As String
        Get
            Return Me.queryCacheIdField
        End Get
        Set
            Me.queryCacheIdField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
    Public Property queryTerm() As assetQueryTerm
        Get
            Return Me.queryTermField
        End Get
        Set
            Me.queryTermField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
    Public Property sortOptions() As sortOptions
        Get
            Return Me.sortOptionsField
        End Get
        Set
            Me.sortOptionsField = value
        End Set
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Partial Public Class assetQueryTerm
    
    Private fieldNameField As String
    
    Private operatorField As System.Nullable(Of queryOperator)
    
    Private subqueriesField() As assetQueryTerm
    
    Private valuesField() As String
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
    Public Property fieldName() As String
        Get
            Return Me.fieldNameField
        End Get
        Set
            Me.fieldNameField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
    Public Property [operator]() As System.Nullable(Of queryOperator)
        Get
            Return Me.operatorField
        End Get
        Set
            Me.operatorField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute("subqueries", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
    Public Property subqueries() As assetQueryTerm()
        Get
            Return Me.subqueriesField
        End Get
        Set
            Me.subqueriesField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute("values", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
    Public Property values() As String()
        Get
            Return Me.valuesField
        End Get
        Set
            Me.valuesField = value
        End Set
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Public Enum queryOperator
    
    '''<remarks/>
    operatorAnd
    
    '''<remarks/>
    operatorOr
    
    '''<remarks/>
    assetsById
    
    '''<remarks/>
    notNullValue
    
    '''<remarks/>
    nullValue
    
    '''<remarks/>
    equalValue
    
    '''<remarks/>
    notEqualValue
    
    '''<remarks/>
    containsValue
    
    '''<remarks/>
    startsWithValue
    
    '''<remarks/>
    endsWithValue
    
    '''<remarks/>
    notContainsValue
    
    '''<remarks/>
    notStartsWithValue
    
    '''<remarks/>
    notEndsWithValue
    
    '''<remarks/>
    lessThanValue
    
    '''<remarks/>
    greaterThanValue
    
    '''<remarks/>
    lessThanOrEqualValue
    
    '''<remarks/>
    greaterThanOrEqualValue
    
    '''<remarks/>
    matchUnparsedQueryString
End Enum

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Partial Public Class exclusionInfo
    
    Private allowAllExtensionsField As Boolean
    
    Private allowedExtensionsField() As String
    
    Private pathExclusionsField() As attribute
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property allowAllExtensions() As Boolean
        Get
            Return Me.allowAllExtensionsField
        End Get
        Set
            Me.allowAllExtensionsField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute("allowedExtensions", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
    Public Property allowedExtensions() As String()
        Get
            Return Me.allowedExtensionsField
        End Get
        Set
            Me.allowedExtensionsField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute("pathExclusions", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
    Public Property pathExclusions() As attribute()
        Get
            Return Me.pathExclusionsField
        End Get
        Set
            Me.pathExclusionsField = value
        End Set
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Partial Public Class attribute
    
    Private valueField As String
    
    Private nameField As String
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property value() As String
        Get
            Return Me.valueField
        End Get
        Set
            Me.valueField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlAttributeAttribute()>  _
    Public Property name() As String
        Get
            Return Me.nameField
        End Get
        Set
            Me.nameField = value
        End Set
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Partial Public Class catalogChangeStatus
    
    Private catalogIdField As String
    
    Private cnField() As attribute
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property catalogId() As String
        Get
            Return Me.catalogIdField
        End Get
        Set
            Me.catalogIdField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute("cn", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
    Public Property cn() As attribute()
        Get
            Return Me.cnField
        End Get
        Set
            Me.cnField = value
        End Set
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Partial Public Class fieldValuesChange
    
    Private actionField As fieldValuesChangeAction
    
    Private actionFieldSpecified As Boolean
    
    Private existingValuesField() As String
    
    Private fieldNameField As String
    
    Private newValuesField() As String
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property action() As fieldValuesChangeAction
        Get
            Return Me.actionField
        End Get
        Set
            Me.actionField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlIgnoreAttribute()>  _
    Public Property actionSpecified() As Boolean
        Get
            Return Me.actionFieldSpecified
        End Get
        Set
            Me.actionFieldSpecified = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute("existingValues", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
    Public Property existingValues() As String()
        Get
            Return Me.existingValuesField
        End Get
        Set
            Me.existingValuesField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property fieldName() As String
        Get
            Return Me.fieldNameField
        End Get
        Set
            Me.fieldNameField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute("newValues", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
    Public Property newValues() As String()
        Get
            Return Me.newValuesField
        End Get
        Set
            Me.newValuesField = value
        End Set
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Public Enum fieldValuesChangeAction
    
    '''<remarks/>
    add
    
    '''<remarks/>
    replaceAllValues
    
    '''<remarks/>
    replace
    
    '''<remarks/>
    append
    
    '''<remarks/>
    delete
    
    '''<remarks/>
    deleteAllValues
End Enum

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Partial Public Class ingestField
    
    Private fieldDefinitionField As fieldDefinition
    
    Private requiredField As Boolean
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property fieldDefinition() As fieldDefinition
        Get
            Return Me.fieldDefinitionField
        End Get
        Set
            Me.fieldDefinitionField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property required() As Boolean
        Get
            Return Me.requiredField
        End Get
        Set
            Me.requiredField = value
        End Set
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Partial Public Class fieldDefinition
    
    Private defaultValuesField() As String
    
    Private embeddableField As Boolean
    
    Private hasPredefinedValuesField As Boolean
    
    Private hierarchicalField As Boolean
    
    Private idField As String
    
    Private internalNameField As String
    
    Private localizedNamesField() As attribute
    
    Private maxLengthField As Integer
    
    Private multivaluedField As Boolean
    
    Private nestedPredefinedValuesField() As nestedValue
    
    Private precisionField As Integer
    
    Private predefinedValuesField() As String
    
    Private searchableField As Boolean
    
    Private showTimeField As Boolean
    
    Private sortableField As Boolean
    
    Private systemNameField As String
    
    Private typeField As Integer
    
    Private usePredefinedOnlyField As Boolean
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute("defaultValues", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
    Public Property defaultValues() As String()
        Get
            Return Me.defaultValuesField
        End Get
        Set
            Me.defaultValuesField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property embeddable() As Boolean
        Get
            Return Me.embeddableField
        End Get
        Set
            Me.embeddableField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property hasPredefinedValues() As Boolean
        Get
            Return Me.hasPredefinedValuesField
        End Get
        Set
            Me.hasPredefinedValuesField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property hierarchical() As Boolean
        Get
            Return Me.hierarchicalField
        End Get
        Set
            Me.hierarchicalField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property id() As String
        Get
            Return Me.idField
        End Get
        Set
            Me.idField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property internalName() As String
        Get
            Return Me.internalNameField
        End Get
        Set
            Me.internalNameField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute("localizedNames", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
    Public Property localizedNames() As attribute()
        Get
            Return Me.localizedNamesField
        End Get
        Set
            Me.localizedNamesField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property maxLength() As Integer
        Get
            Return Me.maxLengthField
        End Get
        Set
            Me.maxLengthField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property multivalued() As Boolean
        Get
            Return Me.multivaluedField
        End Get
        Set
            Me.multivaluedField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute("nestedPredefinedValues", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
    Public Property nestedPredefinedValues() As nestedValue()
        Get
            Return Me.nestedPredefinedValuesField
        End Get
        Set
            Me.nestedPredefinedValuesField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property precision() As Integer
        Get
            Return Me.precisionField
        End Get
        Set
            Me.precisionField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute("predefinedValues", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
    Public Property predefinedValues() As String()
        Get
            Return Me.predefinedValuesField
        End Get
        Set
            Me.predefinedValuesField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property searchable() As Boolean
        Get
            Return Me.searchableField
        End Get
        Set
            Me.searchableField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property showTime() As Boolean
        Get
            Return Me.showTimeField
        End Get
        Set
            Me.showTimeField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property sortable() As Boolean
        Get
            Return Me.sortableField
        End Get
        Set
            Me.sortableField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property systemName() As String
        Get
            Return Me.systemNameField
        End Get
        Set
            Me.systemNameField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property type() As Integer
        Get
            Return Me.typeField
        End Get
        Set
            Me.typeField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property usePredefinedOnly() As Boolean
        Get
            Return Me.usePredefinedOnlyField
        End Get
        Set
            Me.usePredefinedOnlyField = value
        End Set
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Partial Public Class nestedValue
    
    Private childrenField() As nestedValue
    
    Private idField As String
    
    Private parentIdField As String
    
    Private valueField As String
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute("children", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
    Public Property children() As nestedValue()
        Get
            Return Me.childrenField
        End Get
        Set
            Me.childrenField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property id() As String
        Get
            Return Me.idField
        End Get
        Set
            Me.idField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property parentId() As String
        Get
            Return Me.parentIdField
        End Get
        Set
            Me.parentIdField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property value() As String
        Get
            Return Me.valueField
        End Get
        Set
            Me.valueField = value
        End Set
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Partial Public Class ingestConfig
    
    Private fieldsField() As ingestField
    
    Private headerTextField As String
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute("fields", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
    Public Property fields() As ingestField()
        Get
            Return Me.fieldsField
        End Get
        Set
            Me.fieldsField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property headerText() As String
        Get
            Return Me.headerTextField
        End Get
        Set
            Me.headerTextField = value
        End Set
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Partial Public Class catalogingOptions
    
    Private extractMetadataField As Boolean
    
    Private indexDocumentTextField As Boolean
    
    Private keywordsFromPathStyleField As Long
    
    Private languageField As String
    
    Private parseKeywordsField As Boolean
    
    Private thumbnailSizeField As Integer
    
    Private useConstrainedIngestField As Boolean
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property extractMetadata() As Boolean
        Get
            Return Me.extractMetadataField
        End Get
        Set
            Me.extractMetadataField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property indexDocumentText() As Boolean
        Get
            Return Me.indexDocumentTextField
        End Get
        Set
            Me.indexDocumentTextField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property keywordsFromPathStyle() As Long
        Get
            Return Me.keywordsFromPathStyleField
        End Get
        Set
            Me.keywordsFromPathStyleField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property language() As String
        Get
            Return Me.languageField
        End Get
        Set
            Me.languageField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property parseKeywords() As Boolean
        Get
            Return Me.parseKeywordsField
        End Get
        Set
            Me.parseKeywordsField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property thumbnailSize() As Integer
        Get
            Return Me.thumbnailSizeField
        End Get
        Set
            Me.thumbnailSizeField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property useConstrainedIngest() As Boolean
        Get
            Return Me.useConstrainedIngestField
        End Get
        Set
            Me.useConstrainedIngestField = value
        End Set
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Partial Public Class task
    
    Private catalogIdField As String
    
    Private nameField As String
    
    Private settingsField() As attribute
    
    Private taskIdField As String
    
    Private typeField As taskType
    
    Private typeFieldSpecified As Boolean
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property catalogId() As String
        Get
            Return Me.catalogIdField
        End Get
        Set
            Me.catalogIdField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property name() As String
        Get
            Return Me.nameField
        End Get
        Set
            Me.nameField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute("settings", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
    Public Property settings() As attribute()
        Get
            Return Me.settingsField
        End Get
        Set
            Me.settingsField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
    Public Property taskId() As String
        Get
            Return Me.taskIdField
        End Get
        Set
            Me.taskIdField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property type() As taskType
        Get
            Return Me.typeField
        End Get
        Set
            Me.typeField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlIgnoreAttribute()>  _
    Public Property typeSpecified() As Boolean
        Get
            Return Me.typeFieldSpecified
        End Get
        Set
            Me.typeFieldSpecified = value
        End Set
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Public Enum taskType
    
    '''<remarks/>
    runScript
    
    '''<remarks/>
    convert
    
    '''<remarks/>
    rename
    
    '''<remarks/>
    saveOnDisk
    
    '''<remarks/>
    download
    
    '''<remarks/>
    regenerateThumbnail
    
    '''<remarks/>
    updateAssetProperties
    
    '''<remarks/>
    moveAssets
    
    '''<remarks/>
    contactSheet
    
    '''<remarks/>
    importData
End Enum

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Partial Public Class semaphore
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Partial Public Class job
    
    Private completionSemaphoreField As semaphore
    
    Private clientLocaleField As locale
    
    Private clientLocaleFieldSpecified As Boolean
    
    Private clientTimeZoneOffsetField As Integer
    
    Private descriptionField As String
    
    Private jobIdField As String
    
    Private sourceImageField As sourceImage
    
    Private sourceImageFieldSpecified As Boolean
    
    Private tasksField() As task
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property completionSemaphore() As semaphore
        Get
            Return Me.completionSemaphoreField
        End Get
        Set
            Me.completionSemaphoreField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property clientLocale() As locale
        Get
            Return Me.clientLocaleField
        End Get
        Set
            Me.clientLocaleField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlIgnoreAttribute()>  _
    Public Property clientLocaleSpecified() As Boolean
        Get
            Return Me.clientLocaleFieldSpecified
        End Get
        Set
            Me.clientLocaleFieldSpecified = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property clientTimeZoneOffset() As Integer
        Get
            Return Me.clientTimeZoneOffsetField
        End Get
        Set
            Me.clientTimeZoneOffsetField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property description() As String
        Get
            Return Me.descriptionField
        End Get
        Set
            Me.descriptionField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property jobId() As String
        Get
            Return Me.jobIdField
        End Get
        Set
            Me.jobIdField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property sourceImage() As sourceImage
        Get
            Return Me.sourceImageField
        End Get
        Set
            Me.sourceImageField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlIgnoreAttribute()>  _
    Public Property sourceImageSpecified() As Boolean
        Get
            Return Me.sourceImageFieldSpecified
        End Get
        Set
            Me.sourceImageFieldSpecified = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute("tasks", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
    Public Property tasks() As task()
        Get
            Return Me.tasksField
        End Get
        Set
            Me.tasksField = value
        End Set
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Public Enum locale
    
    '''<remarks/>
    en_US
    
    '''<remarks/>
    en_GB
    
    '''<remarks/>
    en_ES
    
    '''<remarks/>
    de_DE
    
    '''<remarks/>
    fr_FR
    
    '''<remarks/>
    it_IT
    
    '''<remarks/>
    ja_JP
End Enum

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Public Enum sourceImage
    
    '''<remarks/>
    original
    
    '''<remarks/>
    preview
End Enum

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Partial Public Class jobStatus
    
    Private catalogIdField As String
    
    Private descriptionField As String
    
    Private jobDetailsField() As attribute
    
    Private jobIdField As String
    
    Private statusField As jobStatusType
    
    Private statusFieldSpecified As Boolean
    
    Private timeCompletedField As String
    
    Private timeSubmittedField As String
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property catalogId() As String
        Get
            Return Me.catalogIdField
        End Get
        Set
            Me.catalogIdField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property description() As String
        Get
            Return Me.descriptionField
        End Get
        Set
            Me.descriptionField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute("jobDetails", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
    Public Property jobDetails() As attribute()
        Get
            Return Me.jobDetailsField
        End Get
        Set
            Me.jobDetailsField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property jobId() As String
        Get
            Return Me.jobIdField
        End Get
        Set
            Me.jobIdField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property status() As jobStatusType
        Get
            Return Me.statusField
        End Get
        Set
            Me.statusField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlIgnoreAttribute()>  _
    Public Property statusSpecified() As Boolean
        Get
            Return Me.statusFieldSpecified
        End Get
        Set
            Me.statusFieldSpecified = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property timeCompleted() As String
        Get
            Return Me.timeCompletedField
        End Get
        Set
            Me.timeCompletedField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property timeSubmitted() As String
        Get
            Return Me.timeSubmittedField
        End Get
        Set
            Me.timeSubmittedField = value
        End Set
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Public Enum jobStatusType
    
    '''<remarks/>
    retrieving
    
    '''<remarks/>
    queued
    
    '''<remarks/>
    inProgress
    
    '''<remarks/>
    complete
    
    '''<remarks/>
    canceled
End Enum

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Partial Public Class keySpecification
    
    Private exponentField As String
    
    Private modulusBase16Field As String
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property exponent() As String
        Get
            Return Me.exponentField
        End Get
        Set
            Me.exponentField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property modulusBase16() As String
        Get
            Return Me.modulusBase16Field
        End Get
        Set
            Me.modulusBase16Field = value
        End Set
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Partial Public Class folder
    
    Private sField() As folder
    
    Private fField As Integer
    
    Private fFieldSpecified As Boolean
    
    Private mField As Integer
    
    Private mFieldSpecified As Boolean
    
    Private nField As String
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute("s", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
    Public Property s() As folder()
        Get
            Return Me.sField
        End Get
        Set
            Me.sField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property f() As Integer
        Get
            Return Me.fField
        End Get
        Set
            Me.fField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlIgnoreAttribute()>  _
    Public Property fSpecified() As Boolean
        Get
            Return Me.fFieldSpecified
        End Get
        Set
            Me.fFieldSpecified = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property m() As Integer
        Get
            Return Me.mField
        End Get
        Set
            Me.mField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlIgnoreAttribute()>  _
    Public Property mSpecified() As Boolean
        Get
            Return Me.mFieldSpecified
        End Get
        Set
            Me.mFieldSpecified = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlAttributeAttribute()>  _
    Public Property n() As String
        Get
            Return Me.nField
        End Get
        Set
            Me.nField = value
        End Set
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Partial Public Class catalog
    
    Private catalogIdField As String
    
    Private detailsField() As attribute
    
    Private nameField As String
    
    Private wereUsersImportedField As Boolean
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property catalogId() As String
        Get
            Return Me.catalogIdField
        End Get
        Set
            Me.catalogIdField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute("details", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
    Public Property details() As attribute()
        Get
            Return Me.detailsField
        End Get
        Set
            Me.detailsField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property name() As String
        Get
            Return Me.nameField
        End Get
        Set
            Me.nameField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property wereUsersImported() As Boolean
        Get
            Return Me.wereUsersImportedField
        End Get
        Set
            Me.wereUsersImportedField = value
        End Set
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Partial Public Class catalogPermissions
    
    Private catalogIdField As String
    
    Private enabledPermissionsField() As System.Nullable(Of userPermission)
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property catalogId() As String
        Get
            Return Me.catalogIdField
        End Get
        Set
            Me.catalogIdField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute("enabledPermissions", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
    Public Property enabledPermissions() As System.Nullable(Of userPermission)()
        Get
            Return Me.enabledPermissionsField
        End Get
        Set
            Me.enabledPermissionsField = value
        End Set
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Public Enum userPermission
    
    '''<remarks/>
    canAdministerCatalog
    
    '''<remarks/>
    addAsset
    
    '''<remarks/>
    modifyAssetProperties
    
    '''<remarks/>
    deleteAssetContents
    
    '''<remarks/>
    modifyAssetContents
    
    '''<remarks/>
    downloadPreviews
    
    '''<remarks/>
    accessOriginals
    
    '''<remarks/>
    saveOutputSetting
    
    '''<remarks/>
    useCustomPresets
    
    '''<remarks/>
    deleteAssetFromCatalog
    
    '''<remarks/>
    canModifyFolderStructure
    
    '''<remarks/>
    canMoveAssets
    
    '''<remarks/>
    canEmbedMetadata
    
    '''<remarks/>
    canImportMetadata
    
    '''<remarks/>
    canManagePublicGallery
    
    '''<remarks/>
    createContactSheet
    
    '''<remarks/>
    synchronizeAutoSyncFolder
End Enum

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Partial Public Class multiValuedAttribute
    
    Private nameField As String
    
    Private valuesField() As String
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property name() As String
        Get
            Return Me.nameField
        End Get
        Set
            Me.nameField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute("values", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
    Public Property values() As String()
        Get
            Return Me.valuesField
        End Get
        Set
            Me.valuesField = value
        End Set
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Partial Public Class asset
    
    Private assetIdField As String
    
    Private attributesField() As multiValuedAttribute
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property assetId() As String
        Get
            Return Me.assetIdField
        End Get
        Set
            Me.assetIdField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute("attributes", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
    Public Property attributes() As multiValuedAttribute()
        Get
            Return Me.attributesField
        End Get
        Set
            Me.attributesField = value
        End Set
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Partial Public Class assetQueryResults
    
    Private assetsField() As asset
    
    Private queryCacheIdField As String
    
    Private totalNumberOfAssetsField As Integer
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute("assets", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
    Public Property assets() As asset()
        Get
            Return Me.assetsField
        End Get
        Set
            Me.assetsField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
    Public Property queryCacheId() As String
        Get
            Return Me.queryCacheIdField
        End Get
        Set
            Me.queryCacheIdField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property totalNumberOfAssets() As Integer
        Get
            Return Me.totalNumberOfAssetsField
        End Get
        Set
            Me.totalNumberOfAssetsField = value
        End Set
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Partial Public Class assetQueryResultOptions
    
    Private fieldNamesField() As String
    
    Private pageSizeField As Integer
    
    Private startingIndexField As Integer
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute("fieldNames", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
    Public Property fieldNames() As String()
        Get
            Return Me.fieldNamesField
        End Get
        Set
            Me.fieldNamesField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property pageSize() As Integer
        Get
            Return Me.pageSizeField
        End Get
        Set
            Me.pageSizeField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property startingIndex() As Integer
        Get
            Return Me.startingIndexField
        End Get
        Set
            Me.startingIndexField = value
        End Set
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Partial Public Class watchFolder
    
    Private catalogingOptionsIdField As String
    
    Private currentStatusField As Integer
    
    Private pathField As String
    
    Private removeMissingItemsField As Boolean
    
    Private scanContinuouslyForChangesField As Boolean
    
    Private scanContinuouslyForChangesFieldSpecified As Boolean
    
    Private syncFrequencyInSecondsField As Integer
    
    Private syncStartTimeInSecondsFromMidnightField As Integer
    
    Private synchronizeField As syncOptions
    
    Private synchronizeFieldSpecified As Boolean
    
    Private watchFolderIdField As String
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property catalogingOptionsId() As String
        Get
            Return Me.catalogingOptionsIdField
        End Get
        Set
            Me.catalogingOptionsIdField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property currentStatus() As Integer
        Get
            Return Me.currentStatusField
        End Get
        Set
            Me.currentStatusField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property path() As String
        Get
            Return Me.pathField
        End Get
        Set
            Me.pathField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property removeMissingItems() As Boolean
        Get
            Return Me.removeMissingItemsField
        End Get
        Set
            Me.removeMissingItemsField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property scanContinuouslyForChanges() As Boolean
        Get
            Return Me.scanContinuouslyForChangesField
        End Get
        Set
            Me.scanContinuouslyForChangesField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlIgnoreAttribute()>  _
    Public Property scanContinuouslyForChangesSpecified() As Boolean
        Get
            Return Me.scanContinuouslyForChangesFieldSpecified
        End Get
        Set
            Me.scanContinuouslyForChangesFieldSpecified = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property syncFrequencyInSeconds() As Integer
        Get
            Return Me.syncFrequencyInSecondsField
        End Get
        Set
            Me.syncFrequencyInSecondsField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property syncStartTimeInSecondsFromMidnight() As Integer
        Get
            Return Me.syncStartTimeInSecondsFromMidnightField
        End Get
        Set
            Me.syncStartTimeInSecondsFromMidnightField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property synchronize() As syncOptions
        Get
            Return Me.synchronizeField
        End Get
        Set
            Me.synchronizeField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlIgnoreAttribute()>  _
    Public Property synchronizeSpecified() As Boolean
        Get
            Return Me.synchronizeFieldSpecified
        End Get
        Set
            Me.synchronizeFieldSpecified = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property watchFolderId() As String
        Get
            Return Me.watchFolderIdField
        End Get
        Set
            Me.watchFolderIdField = value
        End Set
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Public Enum syncOptions
    
    '''<remarks/>
    manual
    
    '''<remarks/>
    whenChangesAreFound
    
    '''<remarks/>
    onSchedule
    
    '''<remarks/>
    atSpecificTime
End Enum

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Partial Public Class gallery
    
    Private accessTypeField As galleryAccessType
    
    Private accessTypeFieldSpecified As Boolean
    
    Private galleryIdField As String
    
    Private nameField As String
    
    Private ownerField As String
    
    Private savedFindField As assetQueryTerm
    
    Private typeField As galleryType
    
    Private typeFieldSpecified As Boolean
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property accessType() As galleryAccessType
        Get
            Return Me.accessTypeField
        End Get
        Set
            Me.accessTypeField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlIgnoreAttribute()>  _
    Public Property accessTypeSpecified() As Boolean
        Get
            Return Me.accessTypeFieldSpecified
        End Get
        Set
            Me.accessTypeFieldSpecified = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property galleryId() As String
        Get
            Return Me.galleryIdField
        End Get
        Set
            Me.galleryIdField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property name() As String
        Get
            Return Me.nameField
        End Get
        Set
            Me.nameField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property owner() As String
        Get
            Return Me.ownerField
        End Get
        Set
            Me.ownerField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
    Public Property savedFind() As assetQueryTerm
        Get
            Return Me.savedFindField
        End Get
        Set
            Me.savedFindField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property type() As galleryType
        Get
            Return Me.typeField
        End Get
        Set
            Me.typeField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlIgnoreAttribute()>  _
    Public Property typeSpecified() As Boolean
        Get
            Return Me.typeFieldSpecified
        End Get
        Set
            Me.typeFieldSpecified = value
        End Set
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Public Enum galleryAccessType
    
    '''<remarks/>
    publicAccess
    
    '''<remarks/>
    privateAccess
    
    '''<remarks/>
    lockedAccess
End Enum

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Public Enum galleryType
    
    '''<remarks/>
    saved
    
    '''<remarks/>
    smart
End Enum

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Partial Public Class sortOptions
    
    Private sortFieldNameField As String
    
    Private sortOrderAscendingField As Boolean
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
    Public Property sortFieldName() As String
        Get
            Return Me.sortFieldNameField
        End Get
        Set
            Me.sortFieldNameField = value
        End Set
    End Property
    
    '''<remarks/>
    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
    Public Property sortOrderAscending() As Boolean
        Get
            Return Me.sortOrderAscendingField
        End Get
        Set
            Me.sortOrderAscendingField = value
        End Set
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Public Enum taskSetting
    
    '''<remarks/>
    scriptName
    
    '''<remarks/>
    propertyName
    
    '''<remarks/>
    action
    
    '''<remarks/>
    existingValue
    
    '''<remarks/>
    newValue
    
    '''<remarks/>
    embed
    
    '''<remarks/>
    outputFileFormat
    
    '''<remarks/>
    colorMode
    
    '''<remarks/>
    colors
    
    '''<remarks/>
    retainTransparency
    
    '''<remarks/>
    resolution
    
    '''<remarks/>
    resolutionUnits
    
    '''<remarks/>
    resizeType
    
    '''<remarks/>
    resizeHeight
    
    '''<remarks/>
    resizeWidth
    
    '''<remarks/>
    resizeUnits
    
    '''<remarks/>
    resizePercent
    
    '''<remarks/>
    compressionQuality
    
    '''<remarks/>
    compressionType
    
    '''<remarks/>
    endian
    
    '''<remarks/>
    dngJpegPreview
    
    '''<remarks/>
    dngEmbedRawFile
    
    '''<remarks/>
    dngCameraRawVersion
    
    '''<remarks/>
    watermark
    
    '''<remarks/>
    watermarkType
    
    '''<remarks/>
    watermarkPosition
    
    '''<remarks/>
    watermarkFont
    
    '''<remarks/>
    watermarkFontStyle
    
    '''<remarks/>
    watermarkFontSize
    
    '''<remarks/>
    watermarkTransparency
    
    '''<remarks/>
    watermarkColor
    
    '''<remarks/>
    processImageFilesOnly
    
    '''<remarks/>
    autoRename
    
    '''<remarks/>
    frontRenameType
    
    '''<remarks/>
    frontRenameValue
    
    '''<remarks/>
    middleRenameType
    
    '''<remarks/>
    middleRenameValue
    
    '''<remarks/>
    endRenameType
    
    '''<remarks/>
    endRenameValue
    
    '''<remarks/>
    destination
    
    '''<remarks/>
    addToCatalog
    
    '''<remarks/>
    pageHeight
    
    '''<remarks/>
    pageWidth
    
    '''<remarks/>
    gridRows
    
    '''<remarks/>
    gridColumns
    
    '''<remarks/>
    header
    
    '''<remarks/>
    footer
    
    '''<remarks/>
    fieldname
    
    '''<remarks/>
    importFile
    
    '''<remarks/>
    itemCount
    
    '''<remarks/>
    filename
    
    '''<remarks/>
    originalOnly
End Enum

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Public Enum colorMode
    
    '''<remarks/>
    RGB
    
    '''<remarks/>
    CMYK
    
    '''<remarks/>
    Grayscale
End Enum

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Public Enum outputFileFormat
    
    '''<remarks/>
    JPEG
    
    '''<remarks/>
    TIFF
    
    '''<remarks/>
    DNG
    
    '''<remarks/>
    AVI
    
    '''<remarks/>
    FLV
    
    '''<remarks/>
    MOV
    
    '''<remarks/>
    MP4
    
    '''<remarks/>
    MPG
End Enum

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Public Enum outputDestination
    
    '''<remarks/>
    sameFolder
    
    '''<remarks/>
    replace
End Enum

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Public Enum renameType
    
    '''<remarks/>
    filename
    
    '''<remarks/>
    text
    
    '''<remarks/>
    numberFrom
End Enum

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Public Enum dngEmbedRawFile
    
    '''<remarks/>
    embedRawFile
    
    '''<remarks/>
    dontEmbedRawFile
End Enum

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Public Enum watermarkType
    
    '''<remarks/>
    text
    
    '''<remarks/>
    image
    
    '''<remarks/>
    metadata
End Enum

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Public Enum watermarkPosition
    
    '''<remarks/>
    center
    
    '''<remarks/>
    fit
    
    '''<remarks/>
    topLeft
    
    '''<remarks/>
    topRight
    
    '''<remarks/>
    bottomLeft
    
    '''<remarks/>
    bottomRight
End Enum

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Public Enum addToCatalog
    
    '''<remarks/>
    addToCatalog
    
    '''<remarks/>
    dontAddToCatalog
End Enum

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Public Enum compressionType
    
    '''<remarks/>
    None
    
    '''<remarks/>
    Zip
    
    '''<remarks/>
    JPEG
    
    '''<remarks/>
    LZW
End Enum

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Public Enum dngCameraRawVersion
    
    '''<remarks/>
    FiveFourPlus
    
    '''<remarks/>
    FourSixPlus
    
    '''<remarks/>
    FourOnePlus
    
    '''<remarks/>
    TwoFourPlus
End Enum

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Public Enum dngJpegPreviewType
    
    '''<remarks/>
    None
    
    '''<remarks/>
    Medium
    
    '''<remarks/>
    Large
End Enum

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Public Enum resizeType
    
    '''<remarks/>
    percent
    
    '''<remarks/>
    fitWithin
    
    '''<remarks/>
    expandCrop
End Enum

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.SerializableAttribute(),  _
 System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://portfolio.extensis/service/asset")>  _
Public Enum unit
    
    '''<remarks/>
    pixels
    
    '''<remarks/>
    inches
    
    '''<remarks/>
    centimeters
    
    '''<remarks/>
    millimeters
End Enum

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub addAssetsByPathCompletedEventHandler(ByVal sender As Object, ByVal e As addAssetsByPathCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class addAssetsByPathCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As String()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),String())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub addItemsToGalleryCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub cancelJobCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub createGalleryCompletedEventHandler(ByVal sender As Object, ByVal e As createGalleryCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class createGalleryCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As gallery
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),gallery)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub getWatchFolderCompletedEventHandler(ByVal sender As Object, ByVal e As getWatchFolderCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class getWatchFolderCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As watchFolder
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),watchFolder)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub addWatchFolderCompletedEventHandler(ByVal sender As Object, ByVal e As addWatchFolderCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class addWatchFolderCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As watchFolder
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),watchFolder)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub updateWatchFolderCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub removeWatchFolderCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub createSubfolderCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub deleteGalleryCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub deleteSubfolderCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub getAssetPreviewCompletedEventHandler(ByVal sender As Object, ByVal e As getAssetPreviewCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class getAssetPreviewCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As String
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),String)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub getAssetsCompletedEventHandler(ByVal sender As Object, ByVal e As getAssetsCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class getAssetsCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As assetQueryResults
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),assetQueryResults)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub getAutomationScriptsCompletedEventHandler(ByVal sender As Object, ByVal e As getAutomationScriptsCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class getAutomationScriptsCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As String()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),String())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub getCatalogPermissionsCompletedEventHandler(ByVal sender As Object, ByVal e As getCatalogPermissionsCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class getCatalogPermissionsCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As catalogPermissions()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),catalogPermissions())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub getCatalogsCompletedEventHandler(ByVal sender As Object, ByVal e As getCatalogsCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class getCatalogsCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As catalog()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),catalog())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub getDetailsForWatchFolderCompletedEventHandler(ByVal sender As Object, ByVal e As getDetailsForWatchFolderCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class getDetailsForWatchFolderCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As attribute()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),attribute())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub getErrorDetailsForJobCompletedEventHandler(ByVal sender As Object, ByVal e As getErrorDetailsForJobCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class getErrorDetailsForJobCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As attribute()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),attribute())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub getFieldDefinitionsCompletedEventHandler(ByVal sender As Object, ByVal e As getFieldDefinitionsCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class getFieldDefinitionsCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As fieldDefinition()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),fieldDefinition())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub addOrRemovePredefinedValuesCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub setPredefinedValuesCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub addNestedPredefinedValuesCompletedEventHandler(ByVal sender As Object, ByVal e As addNestedPredefinedValuesCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class addNestedPredefinedValuesCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As nestedValue()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),nestedValue())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub changeNestedPredefinedValueCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub moveNestedPredefinedValueCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub deleteNestedPredefinedValuesCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub getFolderTreeForWatchFolderCompletedEventHandler(ByVal sender As Object, ByVal e As getFolderTreeForWatchFolderCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class getFolderTreeForWatchFolderCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As folder
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),folder)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub getGalleriesCompletedEventHandler(ByVal sender As Object, ByVal e As getGalleriesCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class getGalleriesCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As gallery()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),gallery())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub getJobIDsCompletedEventHandler(ByVal sender As Object, ByVal e As getJobIDsCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class getJobIDsCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As String()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),String())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub getRSAPublicEncryptionKeyCompletedEventHandler(ByVal sender As Object, ByVal e As getRSAPublicEncryptionKeyCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class getRSAPublicEncryptionKeyCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As keySpecification
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),keySpecification)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub getServerFeaturesCompletedEventHandler(ByVal sender As Object, ByVal e As getServerFeaturesCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class getServerFeaturesCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As String()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),String())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub getServerSystemInformationCompletedEventHandler(ByVal sender As Object, ByVal e As getServerSystemInformationCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class getServerSystemInformationCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As attribute()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),attribute())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub getStatusForJobsCompletedEventHandler(ByVal sender As Object, ByVal e As getStatusForJobsCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class getStatusForJobsCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As jobStatus()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),jobStatus())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub getWatchFoldersCompletedEventHandler(ByVal sender As Object, ByVal e As getWatchFoldersCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class getWatchFoldersCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As watchFolder()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),watchFolder())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub loginCompletedEventHandler(ByVal sender As Object, ByVal e As loginCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class loginCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As String
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),String)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub logoutCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub moveSubfolderCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub removeAssetsFromCatalogCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub removeItemsFromGalleryCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub runJobCompletedEventHandler(ByVal sender As Object, ByVal e As runJobCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class runJobCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As String
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),String)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub getCatalogingOptionsCompletedEventHandler(ByVal sender As Object, ByVal e As getCatalogingOptionsCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class getCatalogingOptionsCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As catalogingOptions
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),catalogingOptions)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub getIngestConfigCompletedEventHandler(ByVal sender As Object, ByVal e As getIngestConfigCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class getIngestConfigCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As ingestConfig
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),ingestConfig)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub synchronizeFolderCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub getServerFolderNamesCompletedEventHandler(ByVal sender As Object, ByVal e As getServerFolderNamesCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class getServerFolderNamesCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As String()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),String())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub updateAssetFieldValuesCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub updateGalleryCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub createTaskPresetCompletedEventHandler(ByVal sender As Object, ByVal e As createTaskPresetCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class createTaskPresetCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As task
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),task)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub listTaskSettingsCompletedEventHandler(ByVal sender As Object, ByVal e As listTaskSettingsCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class listTaskSettingsCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As System.Nullable(Of taskSetting)()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),System.Nullable(Of taskSetting)())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub listColorModeCompletedEventHandler(ByVal sender As Object, ByVal e As listColorModeCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class listColorModeCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As System.Nullable(Of colorMode)()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),System.Nullable(Of colorMode)())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub listOutputFileFormatCompletedEventHandler(ByVal sender As Object, ByVal e As listOutputFileFormatCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class listOutputFileFormatCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As System.Nullable(Of outputFileFormat)()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),System.Nullable(Of outputFileFormat)())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub listOutputDestinationCompletedEventHandler(ByVal sender As Object, ByVal e As listOutputDestinationCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class listOutputDestinationCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As System.Nullable(Of outputDestination)()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),System.Nullable(Of outputDestination)())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub listRenameTypeCompletedEventHandler(ByVal sender As Object, ByVal e As listRenameTypeCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class listRenameTypeCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As System.Nullable(Of renameType)()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),System.Nullable(Of renameType)())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub listDNGEmbedRawFileCompletedEventHandler(ByVal sender As Object, ByVal e As listDNGEmbedRawFileCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class listDNGEmbedRawFileCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As System.Nullable(Of dngEmbedRawFile)()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),System.Nullable(Of dngEmbedRawFile)())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub listWatermarkTypeCompletedEventHandler(ByVal sender As Object, ByVal e As listWatermarkTypeCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class listWatermarkTypeCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As System.Nullable(Of watermarkType)()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),System.Nullable(Of watermarkType)())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub listWatermarkPositionCompletedEventHandler(ByVal sender As Object, ByVal e As listWatermarkPositionCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class listWatermarkPositionCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As System.Nullable(Of watermarkPosition)()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),System.Nullable(Of watermarkPosition)())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub listAddToCatalogCompletedEventHandler(ByVal sender As Object, ByVal e As listAddToCatalogCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class listAddToCatalogCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As System.Nullable(Of addToCatalog)()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),System.Nullable(Of addToCatalog)())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub listCompressionTypeCompletedEventHandler(ByVal sender As Object, ByVal e As listCompressionTypeCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class listCompressionTypeCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As System.Nullable(Of compressionType)()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),System.Nullable(Of compressionType)())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub listDngCameraRawVersionCompletedEventHandler(ByVal sender As Object, ByVal e As listDngCameraRawVersionCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class listDngCameraRawVersionCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As System.Nullable(Of dngCameraRawVersion)()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),System.Nullable(Of dngCameraRawVersion)())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub listDngJpegPreviewTypeCompletedEventHandler(ByVal sender As Object, ByVal e As listDngJpegPreviewTypeCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class listDngJpegPreviewTypeCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As System.Nullable(Of dngJpegPreviewType)()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),System.Nullable(Of dngJpegPreviewType)())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub listResizeTypeCompletedEventHandler(ByVal sender As Object, ByVal e As listResizeTypeCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class listResizeTypeCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As System.Nullable(Of resizeType)()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),System.Nullable(Of resizeType)())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub listUnitCompletedEventHandler(ByVal sender As Object, ByVal e As listUnitCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class listUnitCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As System.Nullable(Of unit)()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),System.Nullable(Of unit)())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub deleteTaskCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub getAssetsWithBatchOfValuesCompletedEventHandler(ByVal sender As Object, ByVal e As getAssetsWithBatchOfValuesCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class getAssetsWithBatchOfValuesCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As assetQueryResults
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),assetQueryResults)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub getCatalogChangeStatusCompletedEventHandler(ByVal sender As Object, ByVal e As getCatalogChangeStatusCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class getCatalogChangeStatusCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As catalogChangeStatus()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),catalogChangeStatus())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub getDefaultViewSettingsCompletedEventHandler(ByVal sender As Object, ByVal e As getDefaultViewSettingsCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class getDefaultViewSettingsCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As String
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),String)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub getExclusionInfoForCatalogCompletedEventHandler(ByVal sender As Object, ByVal e As getExclusionInfoForCatalogCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class getExclusionInfoForCatalogCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As exclusionInfo
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),exclusionInfo)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub getTaskPresetsCompletedEventHandler(ByVal sender As Object, ByVal e As getTaskPresetsCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class getTaskPresetsCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As task()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),task())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub getUnmatchedFieldValuesFromBatchFindCompletedEventHandler(ByVal sender As Object, ByVal e As getUnmatchedFieldValuesFromBatchFindCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class getUnmatchedFieldValuesFromBatchFindCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As String()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),String())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub getUserPreferencesCompletedEventHandler(ByVal sender As Object, ByVal e As getUserPreferencesCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class getUserPreferencesCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As String
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),String)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub getUserViewSettingsCompletedEventHandler(ByVal sender As Object, ByVal e As getUserViewSettingsCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class getUserViewSettingsCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As String
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),String)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub primeAssetPreviewsCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub setDefaultViewSettingsCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub setSessionInactivityTimeoutCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub setUserPreferencesCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub setUserViewSettingsCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub updateTaskPresetCompletedEventHandler(ByVal sender As Object, ByVal e As updateTaskPresetCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class updateTaskPresetCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As task
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),task)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub uploadFileCompletedEventHandler(ByVal sender As Object, ByVal e As uploadFileCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class uploadFileCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As Integer
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),Integer)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub getVideoExtensionsCompletedEventHandler(ByVal sender As Object, ByVal e As getVideoExtensionsCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class getVideoExtensionsCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As String()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),String())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub getAudioExtensionsCompletedEventHandler(ByVal sender As Object, ByVal e As getAudioExtensionsCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class getAudioExtensionsCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As String()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),String())
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")>  _
Public Delegate Sub completionCompletedEventHandler(ByVal sender As Object, ByVal e As completionCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class completionCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As String()
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),String())
        End Get
    End Property
End Class
